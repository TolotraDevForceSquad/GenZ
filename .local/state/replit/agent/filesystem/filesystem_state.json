{"file_contents":{"design_guidelines.md":{"content":"# Gen Z Safety Platform - Design Guidelines\n\n## Design Approach\n**Reference-Based Approach**: Inspired by Framer's dark and classy aesthetic with modern minimalism, sophisticated typography, and subtle interactive elements.\n\n## Core Design Elements\n\n### A. Color Palette\n**Dark Mode Primary**:\n- Background: 12 8% 8% (deep charcoal)\n- Surface: 12 6% 12% (elevated charcoal)\n- Primary: 220 91% 65% (modern blue)\n- Text Primary: 0 0% 95% (near white)\n- Text Secondary: 0 0% 70% (muted gray)\n- Success: 142 76% 36% (forest green)\n- Warning: 38 92% 50% (amber)\n- Danger: 0 84% 60% (red)\n\n**Accent Colors**:\n- Purple accent: 270 91% 65% (for premium features)\n- Subtle gradients from primary blue to purple for hero sections\n\n### B. Typography\n**Font Families**:\n- Primary: Inter (Google Fonts) - clean, modern sans-serif\n- Accent: Space Grotesk (Google Fonts) - for headings and emphasis\n\n**Hierarchy**:\n- H1: 2.5rem, font-weight 700\n- H2: 2rem, font-weight 600\n- H3: 1.5rem, font-weight 600\n- Body: 1rem, font-weight 400\n- Small: 0.875rem, font-weight 400\n\n### C. Layout System\n**Tailwind Spacing Units**: Consistent use of 2, 4, 6, 8, 12, 16, 24 units\n- Small gaps: p-2, m-4\n- Medium spacing: p-6, gap-8\n- Large sections: py-12, my-16\n- Extra large: py-24\n\n### D. Component Library\n\n**Navigation**:\n- Dark sidebar with subtle blur backdrop\n- Clean top navigation with One Piece logo\n- Minimalist menu items with hover states\n\n**Forms**:\n- Dark input fields with subtle borders\n- Rounded corners (rounded-lg)\n- Focus states with primary color glow\n- Phone number input with country code selector\n\n**Buttons**:\n- Primary: Blue gradient with subtle shadow\n- Secondary: Outline style with blur backdrop when on images\n- Danger: Red solid for destructive actions\n- Icon buttons for admin actions\n\n**Cards**:\n- Dark surface with subtle border\n- Rounded corners (rounded-xl)\n- Soft drop shadows\n- Alert cards with status-based color coding\n\n**Data Displays**:\n- Clean tables with alternating row colors\n- Status badges with appropriate colors\n- Statistics cards with large numbers\n- Interactive map with custom markers\n\n### E. Page-Specific Design\n\n**Landing Page** (`/`):\n- Hero section with gradient overlay\n- One Piece logo prominently displayed\n- \"Gen Z\" branding with modern typography\n- Two-button CTA layout\n\n**Authentication Pages**:\n- Centered forms with dark cards\n- Phone number focus for Gen Z audience\n- Clean validation messages\n\n**Dashboard**:\n- Grid layout for SOS alerts\n- Quick action floating button\n- Status indicators throughout\n\n**Map Page**:\n- Full-screen interactive map\n- Custom markers (red=pending, green=confirmed, gray=fake)\n- Sidebar with alert details\n\n**Admin Interface**:\n- Multi-section layout\n- Statistics dashboard with cards\n- Data tables with action buttons\n- Color-coded status indicators\n\n## Images\n- **One Piece Logo**: Header logo, medium size (120px width)\n- **Avatar Placeholders**: User profile images, circular, 40px default\n- **Map Markers**: Custom SVG icons for alert status\n- **Upload Placeholders**: CIN document upload area with drag-drop styling\n- **Hero Background**: Optional subtle gradient or pattern, no large hero image needed\n\n## Key Principles\n1. **Minimal and Clean**: Framer-inspired simplicity\n2. **Dark-First**: All components designed for dark mode\n3. **Mobile Responsive**: Gen Z mobile-first approach\n4. **Status-Driven**: Clear visual feedback for all states\n5. **Community-Focused**: Social validation elements prominent","size_bytes":3481},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4050},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // put application routes here\n  // prefix all routes with /api\n\n  // use storage to perform CRUD operations on the storage interface\n  // e.g. storage.insertUser(user) or storage.getUserByUsername(username)\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":473},"server/storage.ts":{"content":"import { type User, type InsertUser } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\n// modify the interface with any CRUD methods\n// you might need\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n\n  constructor() {\n    this.users = new Map();\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":993},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  email: text(\"email\").notNull().unique(),\n  phone: text(\"phone\"),\n  avatar: text(\"avatar\"),\n  hasCIN: boolean(\"has_cin\").default(false),\n  isAdmin: boolean(\"is_admin\").default(false),\n  neighborhood: text(\"neighborhood\"),\n  joinedAt: timestamp(\"joined_at\").defaultNow(),\n  alertsCount: text(\"alerts_count\").default(\"0\"),\n  validationsCount: text(\"validations_count\").default(\"0\"),\n});\n\nexport const alerts = pgTable(\"alerts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  reason: text(\"reason\").notNull(),\n  description: text(\"description\").notNull(),\n  location: text(\"location\").notNull(),\n  status: text(\"status\").notNull().default(\"pending\"), // pending, confirmed, fake, resolved\n  urgency: text(\"urgency\").notNull().default(\"medium\"), // low, medium, high\n  authorId: varchar(\"author_id\").notNull().references(() => users.id),\n  confirmedCount: text(\"confirmed_count\").default(\"0\"),\n  rejectedCount: text(\"rejected_count\").default(\"0\"),\n  media: text(\"media\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  joinedAt: true,\n  alertsCount: true,\n  validationsCount: true,\n});\n\nexport const insertAlertSchema = createInsertSchema(alerts).omit({\n  id: true,\n  createdAt: true,\n  confirmedCount: true,\n  rejectedCount: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertAlert = z.infer<typeof insertAlertSchema>;\nexport type Alert = typeof alerts.$inferSelect;\n","size_bytes":1890},"client/src/App.tsx":{"content":"import { Switch, Route, useLocation } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { SidebarProvider, SidebarTrigger } from \"@/components/ui/sidebar\";\nimport { useState } from \"react\";\n\n// Pages\nimport LandingPage from \"@/pages/LandingPage\";\nimport AuthPage from \"@/pages/AuthPage\";\nimport NotFound from \"@/pages/not-found\";\n\n// Components\nimport AppSidebar from \"@/components/AppSidebar\";\nimport Dashboard from \"@/components/Dashboard\";\nimport ProfilePage from \"@/components/ProfilePage\";\nimport MapView from \"@/components/MapView\";\nimport AdminDashboard from \"@/components/AdminDashboard\";\n// Removed AccountSelector - no longer needed\nimport EmergencyContacts from \"@/components/EmergencyContacts\";\n\nfunction Router() {\n  const [location, setLocation] = useLocation();\n  \n  // Real user state management \n  const [currentUser, setCurrentUser] = useState<any>(null);\n\n  // Default authenticated user (in real app, this would come from auth service)\n  const defaultUser = {\n    id: 'usr_naina_001',\n    name: 'Naina Rakotomalala',\n    phone: '+261 32 98 765 43',\n    email: 'naina.rakotomalala@email.mg',\n    avatar: 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=96&h=96&fit=crop&crop=face',\n    hasCIN: true,\n    isAdmin: false,\n    joinedAt: 'Janvier 2024',\n    alertsCount: 12,\n    validationsCount: 45,\n    neighborhood: 'Antananarivo-Renivohitra'\n  };\n\n  // Auto-login with default user on first visit\n  const handleAutoLogin = () => {\n    setCurrentUser(defaultUser);\n    setLocation('/dashboard');\n  };\n\n  // Check if user should see authenticated layout\n  const isAuthenticated = currentUser && location !== '/' && location !== '/login' && location !== '/register';\n  const isLandingOrAuth = location === '/' || location === '/login' || location === '/register';\n\n  const handleLogout = () => {\n    console.log('Logout triggered');\n    setCurrentUser(null as any);\n    setLocation('/');\n  };\n\n  // Real alerts data for map - would come from API in production\n  const alertsData = [\n    {\n      id: '1',\n      reason: 'Agression',\n      description: 'Tentative d\\'agression à Analakely, individu s\\'est enfui vers Andohalo.',\n      location: 'Analakely, Antananarivo',\n      coordinates: { lat: -18.8792, lng: 47.5079 },\n      status: 'pending' as const,\n      urgency: 'high' as const,\n      timestamp: 'Il y a 15 minutes',\n      author: { name: 'Naina Razafy', hasCIN: true }\n    },\n    {\n      id: '2',\n      reason: 'Vol',\n      description: 'Vol de sac signalé près du marché d\\'Andravoahangy.',\n      location: 'Marché Andravoahangy, Antananarivo',\n      coordinates: { lat: -18.8636, lng: 47.5159 },\n      status: 'confirmed' as const,\n      urgency: 'medium' as const,\n      timestamp: 'Il y a 1 heure',\n      author: { name: 'Hery Andriana', hasCIN: false }\n    },\n    {\n      id: '3',\n      reason: 'Harcèlement',\n      description: 'Harcèlement signalé avenue de l\\'Indépendance.',\n      location: 'Avenue de l\\'Indépendance, Antananarivo',\n      coordinates: { lat: -18.9047, lng: 47.5216 },\n      status: 'fake' as const,\n      urgency: 'low' as const,\n      timestamp: 'Il y a 3 heures',\n      author: { name: 'Miora Rakoto', hasCIN: false }\n    }\n  ];\n\n  if (isLandingOrAuth) {\n    return (\n      <Switch>\n        <Route path=\"/\">\n          <LandingPage onLogin={handleAutoLogin} />\n        </Route>\n        <Route path=\"/login\">\n          <AuthPage mode=\"login\" onLogin={handleAutoLogin} />\n        </Route>\n        <Route path=\"/register\">\n          <AuthPage mode=\"register\" onLogin={handleAutoLogin} />\n        </Route>\n        <Route component={NotFound} />\n      </Switch>\n    );\n  }\n\n  // Authenticated layout with sidebar\n  const sidebarStyle = {\n    \"--sidebar-width\": \"20rem\",\n    \"--sidebar-width-icon\": \"4rem\",\n  } as React.CSSProperties;\n\n  return (\n    <SidebarProvider style={sidebarStyle}>\n      <div className=\"flex h-screen w-full\">\n        <AppSidebar user={currentUser} onLogout={handleLogout} />\n        <div className=\"flex flex-col flex-1 overflow-hidden\">\n          <header className=\"flex items-center justify-between p-2 border-b border-border bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60\">\n            <SidebarTrigger data-testid=\"button-sidebar-toggle\" />\n            <div className=\"flex items-center gap-4\">\n              <span className=\"text-sm text-muted-foreground\">\n                Connecté en tant que <span className=\"font-medium\">{currentUser?.name}</span>\n              </span>\n            </div>\n          </header>\n          <main className=\"flex-1 overflow-auto\">\n            <Switch>\n              <Route path=\"/dashboard\">\n                <Dashboard user={currentUser} />\n              </Route>\n              <Route path=\"/profile\">\n                <ProfilePage \n                  user={currentUser}\n                  onUpdateProfile={(data) => console.log('Update profile:', data)}\n                  onUploadCIN={(file) => console.log('Upload CIN:', file.name)}\n                  onUploadAvatar={(file) => console.log('Upload avatar:', file.name)}\n                />\n              </Route>\n              <Route path=\"/map\">\n                <MapView \n                  alerts={alertsData}\n                  onAlertClick={(alert) => console.log('Alert clicked:', alert)}\n                  centerLocation={{ lat: -18.8792, lng: 47.5079 }}\n                />\n              </Route>\n              <Route path=\"/emergency\">\n                <EmergencyContacts />\n              </Route>\n              <Route path=\"/admin\">\n                {currentUser?.isAdmin ? (\n                  <AdminDashboard \n                    onUserAction={(userId, action) => console.log('User action:', userId, action)}\n                    onAlertAction={(alertId, action) => console.log('Alert action:', alertId, action)}\n                  />\n                ) : (\n                  <div className=\"container mx-auto px-4 py-16 text-center\">\n                    <h1 className=\"text-2xl font-bold text-destructive mb-4\">Accès refusé</h1>\n                    <p className=\"text-muted-foreground\">Vous n'avez pas les permissions pour accéder à cette page.</p>\n                  </div>\n                )}\n              </Route>\n              <Route component={NotFound} />\n            </Switch>\n          </main>\n        </div>\n      </div>\n    </SidebarProvider>\n  );\n}\n\nexport default function App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <div className=\"min-h-screen bg-background text-foreground\">\n          <Router />\n        </div>\n        <Toaster />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}","size_bytes":6865},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 0 0% 98%;\n\n  --foreground: 0 0% 15%;\n\n  --border: 0 0% 88%;\n\n  --card: 0 0% 96%;\n\n  --card-foreground: 0 0% 15%;\n\n  --card-border: 0 0% 92%;\n\n  --sidebar: 0 0% 94%;\n\n  --sidebar-foreground: 0 0% 15%;\n\n  --sidebar-border: 0 0% 90%;\n\n  --sidebar-primary: 0 84% 65%;\n\n  --sidebar-primary-foreground: 0 0% 98%;\n\n  --sidebar-accent: 0 0% 88%;\n\n  --sidebar-accent-foreground: 0 0% 15%;\n\n  --sidebar-ring: 0 84% 65%;\n\n  --popover: 0 0% 92%;\n\n  --popover-foreground: 0 0% 15%;\n\n  --popover-border: 0 0% 88%;\n\n  --primary: 0 84% 45%;\n\n  --primary-foreground: 0 0% 98%;\n\n  --secondary: 0 0% 86%;\n\n  --secondary-foreground: 0 0% 15%;\n\n  --muted: 0 0% 90%;\n\n  --muted-foreground: 0 0% 35%;\n\n  --accent: 0 2% 84%;\n\n  --accent-foreground: 0 0% 15%;\n\n  --destructive: 0 84% 45%;\n\n  --destructive-foreground: 0 0% 98%;\n\n  --input: 0 0% 75%;\n  --ring: 0 84% 45%;\n  --chart-1: 0 84% 45%;\n  --chart-2: 270 91% 45%;\n  --chart-3: 142 76% 30%;\n  --chart-4: 38 92% 40%;\n  --chart-5: 0 84% 45%;\n\n  --font-sans: Inter, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: \"SF Mono\", Monaco, \"Cascadia Code\", \"Roboto Mono\", monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.05);\n  --shadow-xs: 0px 1px 3px 0px hsl(0 0% 0% / 0.1), 0px 1px 2px 0px hsl(0 0% 0% / 0.06);\n  --shadow-sm: 0px 1px 3px 0px hsl(0 0% 0% / 0.1), 0px 1px 2px 0px hsl(0 0% 0% / 0.06);\n  --shadow: 0px 1px 3px 0px hsl(0 0% 0% / 0.1), 0px 1px 2px 0px hsl(0 0% 0% / 0.06);\n  --shadow-md: 0px 4px 6px -1px hsl(0 0% 0% / 0.1), 0px 2px 4px -1px hsl(0 0% 0% / 0.06);\n  --shadow-lg: 0px 10px 15px -3px hsl(0 0% 0% / 0.1), 0px 4px 6px -2px hsl(0 0% 0% / 0.05);\n  --shadow-xl: 0px 20px 25px -5px hsl(0 0% 0% / 0.1), 0px 10px 10px -5px hsl(0 0% 0% / 0.04);\n  --shadow-2xl: 0px 25px 50px -12px hsl(0 0% 0% / 0.25);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 12 8% 8%;\n\n  --foreground: 0 0% 95%;\n\n  --border: 12 6% 18%;\n\n  --card: 12 6% 12%;\n\n  --card-foreground: 0 0% 95%;\n\n  --card-border: 12 6% 20%;\n\n  --sidebar: 12 6% 10%;\n\n  --sidebar-foreground: 0 0% 95%;\n\n  --sidebar-border: 12 6% 18%;\n\n  --sidebar-primary: 0 84% 65%;\n\n  --sidebar-primary-foreground: 0 0% 98%;\n\n  --sidebar-accent: 12 4% 16%;\n\n  --sidebar-accent-foreground: 0 0% 90%;\n\n  --sidebar-ring: 0 84% 65%;\n\n  --popover: 12 6% 14%;\n\n  --popover-foreground: 0 0% 95%;\n\n  --popover-border: 12 6% 22%;\n\n  --primary: 0 84% 65%;\n\n  --primary-foreground: 0 0% 98%;\n\n  --secondary: 12 4% 18%;\n\n  --secondary-foreground: 0 0% 90%;\n\n  --muted: 12 4% 14%;\n\n  --muted-foreground: 0 0% 70%;\n\n  --accent: 12 4% 16%;\n\n  --accent-foreground: 0 0% 90%;\n\n  --destructive: 0 84% 60%;\n\n  --destructive-foreground: 0 0% 98%;\n\n  --input: 12 6% 25%;\n  --ring: 0 84% 65%;\n  --chart-1: 0 84% 65%;\n  --chart-2: 270 91% 65%;\n  --chart-3: 142 76% 45%;\n  --chart-4: 38 92% 55%;\n  --chart-5: 0 84% 65%;\n\n  --shadow-2xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.3);\n  --shadow-xs: 0px 1px 3px 0px hsl(0 0% 0% / 0.4), 0px 1px 2px 0px hsl(0 0% 0% / 0.3);\n  --shadow-sm: 0px 1px 3px 0px hsl(0 0% 0% / 0.4), 0px 1px 2px 0px hsl(0 0% 0% / 0.3);\n  --shadow: 0px 1px 3px 0px hsl(0 0% 0% / 0.4), 0px 1px 2px 0px hsl(0 0% 0% / 0.3);\n  --shadow-md: 0px 4px 6px -1px hsl(0 0% 0% / 0.4), 0px 2px 4px -1px hsl(0 0% 0% / 0.3);\n  --shadow-lg: 0px 10px 15px -3px hsl(0 0% 0% / 0.4), 0px 4px 6px -2px hsl(0 0% 0% / 0.25);\n  --shadow-xl: 0px 20px 25px -5px hsl(0 0% 0% / 0.4), 0px 10px 10px -5px hsl(0 0% 0% / 0.2);\n  --shadow-2xl: 0px 25px 50px -12px hsl(0 0% 0% / 0.5);\n\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":9787},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/AccountSelector.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Shield, Crown, User, ChevronRight } from \"lucide-react\";\nimport genZLogo from \"@assets/genzlogo_1758921534790.jpeg\";\n\ninterface AccountSelectorProps {\n  onSelectAccount: (accountType: 'regular' | 'verified' | 'admin') => void;\n}\n\nexport default function AccountSelector({ onSelectAccount }: AccountSelectorProps) {\n  const accounts = [\n    {\n      type: 'regular' as const,\n      title: 'Utilisateur Standard',\n      description: 'Compte utilisateur normal avec accès aux fonctionnalités de base',\n      user: {\n        name: 'Hery Rasoamampianina',\n        avatar: 'https://images.unsplash.com/photo-1494790108755-2616b169db2c?w=64&h=64&fit=crop&crop=face',\n        phone: '+261 34 12 345 67',\n        hasCIN: false\n      },\n      features: [\n        'Créer des alertes SOS',\n        'Valider les alertes communautaires',\n        'Consulter la carte d\\'insécurité',\n        'Gérer son profil'\n      ],\n      icon: User,\n      iconColor: 'text-blue-500',\n      badgeColor: 'bg-blue-500/20 text-blue-400 border-blue-500/30'\n    },\n    {\n      type: 'verified' as const,\n      title: 'Utilisateur Vérifié',\n      description: 'Compte avec CIN validé, alertes auto-confirmées',\n      user: {\n        name: 'Naina Rakotomalala',\n        avatar: 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=64&h=64&fit=crop&crop=face',\n        phone: '+261 32 98 765 43',\n        hasCIN: true\n      },\n      features: [\n        'Toutes les fonctionnalités standard',\n        'Alertes automatiquement confirmées',\n        'Badge de vérification',\n        'Priorité dans les validations'\n      ],\n      icon: Shield,\n      iconColor: 'text-green-500',\n      badgeColor: 'bg-green-500/20 text-green-400 border-green-500/30'\n    },\n    {\n      type: 'admin' as const,\n      title: 'Administrateur',\n      description: 'Accès complet à la gestion de la plateforme',\n      user: {\n        name: 'Miora Andriamampisoa',\n        avatar: 'https://images.unsplash.com/photo-1438761681033-6461ffad8d80?w=64&h=64&fit=crop&crop=face',\n        phone: '+261 33 55 443 32',\n        hasCIN: true,\n        isAdmin: true\n      },\n      features: [\n        'Toutes les fonctionnalités vérifiées',\n        'Gestion des utilisateurs',\n        'Modération des alertes',\n        'Statistiques avancées'\n      ],\n      icon: Crown,\n      iconColor: 'text-red-500',\n      badgeColor: 'bg-red-500/20 text-red-400 border-red-500/30'\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-b from-background to-secondary/20 p-6\">\n      <div className=\"container mx-auto max-w-4xl\">\n        {/* Header */}\n        <div className=\"text-center mb-12\">\n          <div className=\"flex justify-center mb-6\">\n            <img src={genZLogo} alt=\"Gasy Iray\" className=\"w-20 h-20 rounded-xl\" />\n          </div>\n          <h1 className=\"text-3xl md:text-4xl font-bold mb-4 bg-gradient-to-r from-primary to-white bg-clip-text text-transparent\">\n            Demo Gasy Iray\n          </h1>\n          <p className=\"text-lg text-muted-foreground max-w-2xl mx-auto\">\n            Choisissez le type de compte pour accéder à la plateforme et découvrir les fonctionnalités\n          </p>\n        </div>\n\n        {/* Account Cards */}\n        <div className=\"grid md:grid-cols-3 gap-6\">\n          {accounts.map((account) => {\n            const Icon = account.icon;\n            return (\n              <Card \n                key={account.type} \n                className=\"hover-elevate cursor-pointer transition-all duration-200\"\n                onClick={() => onSelectAccount(account.type)}\n                data-testid={`account-${account.type}`}\n              >\n                <CardHeader className=\"text-center\">\n                  <div className=\"flex justify-center mb-4\">\n                    <div className={`w-16 h-16 rounded-full bg-card-border flex items-center justify-center`}>\n                      <Icon className={`w-8 h-8 ${account.iconColor}`} />\n                    </div>\n                  </div>\n                  <CardTitle className=\"text-xl\">{account.title}</CardTitle>\n                  <CardDescription className=\"text-sm\">{account.description}</CardDescription>\n                </CardHeader>\n\n                <CardContent className=\"space-y-4\">\n                  {/* User Preview */}\n                  <div className=\"flex items-center gap-3 p-3 bg-muted/30 rounded-lg\">\n                    <Avatar className=\"w-10 h-10\">\n                      <AvatarImage src={account.user.avatar} alt={account.user.name} />\n                      <AvatarFallback>{account.user.name.charAt(0)}</AvatarFallback>\n                    </Avatar>\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center gap-2\">\n                        <p className=\"font-medium text-sm\">{account.user.name}</p>\n                        {account.user.hasCIN && <Shield className=\"w-3 h-3 text-green-400\" />}\n                        {account.user.isAdmin && <Crown className=\"w-3 h-3 text-red-400\" />}\n                      </div>\n                      <p className=\"text-xs text-muted-foreground\">{account.user.phone}</p>\n                    </div>\n                  </div>\n\n                  {/* Status Badge */}\n                  <div className=\"flex justify-center\">\n                    <Badge className={account.badgeColor}>\n                      {account.type === 'regular' && 'Standard'}\n                      {account.type === 'verified' && 'Vérifié'}\n                      {account.type === 'admin' && 'Administrateur'}\n                    </Badge>\n                  </div>\n\n                  {/* Features */}\n                  <div className=\"space-y-2\">\n                    <p className=\"text-sm font-medium\">Fonctionnalités :</p>\n                    <ul className=\"space-y-1\">\n                      {account.features.map((feature, index) => (\n                        <li key={index} className=\"text-xs text-muted-foreground flex items-center gap-2\">\n                          <ChevronRight className=\"w-3 h-3\" />\n                          {feature}\n                        </li>\n                      ))}\n                    </ul>\n                  </div>\n\n                  {/* Access Button */}\n                  <Button \n                    className=\"w-full mt-4\"\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      onSelectAccount(account.type);\n                    }}\n                  >\n                    Accéder au compte\n                  </Button>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n\n        {/* Footer */}\n        <div className=\"text-center mt-12\">\n          <p className=\"text-sm text-muted-foreground\">\n            Cette page de démonstration vous permet de tester les différents niveaux d'accès\n          </p>\n          <Button \n            variant=\"outline\" \n            className=\"mt-4\"\n            onClick={() => window.location.reload()}\n          >\n            Retour à l'accueil\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":7409},"client/src/components/AdminDashboard.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { useState } from \"react\";\nimport { \n  Users, \n  AlertTriangle, \n  Shield, \n  Ban, \n  UserCheck, \n  Search, \n  MoreHorizontal,\n  Trash2,\n  UserX,\n  CheckCircle,\n  XCircle,\n  Clock\n} from \"lucide-react\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\n\ninterface AdminDashboardProps {\n  onUserAction?: (userId: string, action: string) => void;\n  onAlertAction?: (alertId: string, action: string) => void;\n}\n\nexport default function AdminDashboard({ onUserAction, onAlertAction }: AdminDashboardProps) {\n  const [searchUsers, setSearchUsers] = useState('');\n  const [searchAlerts, setSearchAlerts] = useState('');\n  const [userFilter, setUserFilter] = useState('all');\n  const [alertFilter, setAlertFilter] = useState('all');\n\n  // todo: remove mock functionality\n  const stats = {\n    totalUsers: 1247,\n    verifiedUsers: 342,\n    suspendedUsers: 23,\n    totalAlerts: 1891,\n    pendingAlerts: 156,\n    confirmedAlerts: 1502,\n    fakeAlerts: 233\n  };\n\n  const mockUsers = [\n    {\n      id: '1',\n      name: 'Marie Dubois',\n      phone: '+33 6 12 34 56 78',\n      avatar: 'https://images.unsplash.com/photo-1494790108755-2616b169db2c?w=32&h=32&fit=crop&crop=face',\n      hasCIN: true,\n      status: 'active',\n      joinedAt: '2024-01-15',\n      alertsCount: 5,\n      validationsCount: 23\n    },\n    {\n      id: '2',\n      name: 'Alex Martin',\n      phone: '+33 6 98 76 54 32',\n      hasCIN: false,\n      status: 'active',\n      joinedAt: '2024-02-20',\n      alertsCount: 2,\n      validationsCount: 12\n    },\n    {\n      id: '3',\n      name: 'Sophie Chen',\n      phone: '+33 6 55 44 33 22',\n      hasCIN: false,\n      status: 'suspended',\n      joinedAt: '2024-01-10',\n      alertsCount: 8,\n      validationsCount: 3\n    }\n  ];\n\n  const mockAlerts = [\n    {\n      id: '1',\n      reason: 'Agression',\n      author: 'Marie Dubois',\n      location: 'Rue Victor Hugo, 75016 Paris',\n      status: 'pending',\n      timestamp: '2024-03-20 14:30',\n      validations: { confirmed: 2, rejected: 0 }\n    },\n    {\n      id: '2',\n      reason: 'Vol',\n      author: 'Alex Martin',\n      location: 'Station Châtelet, 75001 Paris',\n      status: 'confirmed',\n      timestamp: '2024-03-20 13:15',\n      validations: { confirmed: 5, rejected: 1 }\n    },\n    {\n      id: '3',\n      reason: 'Harcèlement',\n      author: 'Sophie Chen',\n      location: 'Boulevard Saint-Germain, 75006 Paris',\n      status: 'fake',\n      timestamp: '2024-03-20 11:45',\n      validations: { confirmed: 1, rejected: 4 }\n    }\n  ];\n\n  const filteredUsers = mockUsers.filter(user => {\n    const matchesSearch = user.name.toLowerCase().includes(searchUsers.toLowerCase()) ||\n                         user.phone.includes(searchUsers);\n    const matchesFilter = userFilter === 'all' || \n                         (userFilter === 'verified' && user.hasCIN) ||\n                         (userFilter === 'unverified' && !user.hasCIN) ||\n                         (userFilter === 'suspended' && user.status === 'suspended') ||\n                         (userFilter === 'active' && user.status === 'active');\n    return matchesSearch && matchesFilter;\n  });\n\n  const filteredAlerts = mockAlerts.filter(alert => {\n    const matchesSearch = alert.reason.toLowerCase().includes(searchAlerts.toLowerCase()) ||\n                         alert.location.toLowerCase().includes(searchAlerts.toLowerCase()) ||\n                         alert.author.toLowerCase().includes(searchAlerts.toLowerCase());\n    const matchesFilter = alertFilter === 'all' || alert.status === alertFilter;\n    return matchesSearch && matchesFilter;\n  });\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case 'active':\n        return <Badge className=\"bg-green-500/20 text-green-400 border-green-500/30\">Actif</Badge>;\n      case 'suspended':\n        return <Badge className=\"bg-red-500/20 text-red-400 border-red-500/30\">Suspendu</Badge>;\n      default:\n        return <Badge variant=\"secondary\">{status}</Badge>;\n    }\n  };\n\n  const getAlertStatusBadge = (status: string) => {\n    switch (status) {\n      case 'pending':\n        return <Badge className=\"bg-yellow-500/20 text-yellow-400 border-yellow-500/30\">En attente</Badge>;\n      case 'confirmed':\n        return <Badge className=\"bg-green-500/20 text-green-400 border-green-500/30\">Confirmée</Badge>;\n      case 'fake':\n        return <Badge className=\"bg-gray-500/20 text-gray-400 border-gray-500/30\">Fausse</Badge>;\n      default:\n        return <Badge variant=\"secondary\">{status}</Badge>;\n    }\n  };\n\n  return (\n    <div className=\"container mx-auto px-4 py-6\">\n      <div className=\"space-y-6\">\n        {/* Header */}\n        <div>\n          <h1 className=\"text-3xl font-bold\">Administration</h1>\n          <p className=\"text-muted-foreground\">\n            Console d'administration pour gérer les utilisateurs et les alertes\n          </p>\n        </div>\n\n        {/* Stats Overview */}\n        <div className=\"grid grid-cols-2 md:grid-cols-4 lg:grid-cols-7 gap-4\">\n          <Card>\n            <CardContent className=\"p-4 text-center\">\n              <Users className=\"w-8 h-8 text-primary mx-auto mb-2\" />\n              <p className=\"text-2xl font-bold\">{stats.totalUsers}</p>\n              <p className=\"text-xs text-muted-foreground\">Utilisateurs</p>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-4 text-center\">\n              <Shield className=\"w-8 h-8 text-green-500 mx-auto mb-2\" />\n              <p className=\"text-2xl font-bold\">{stats.verifiedUsers}</p>\n              <p className=\"text-xs text-muted-foreground\">Vérifiés</p>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-4 text-center\">\n              <Ban className=\"w-8 h-8 text-red-500 mx-auto mb-2\" />\n              <p className=\"text-2xl font-bold\">{stats.suspendedUsers}</p>\n              <p className=\"text-xs text-muted-foreground\">Suspendus</p>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-4 text-center\">\n              <AlertTriangle className=\"w-8 h-8 text-primary mx-auto mb-2\" />\n              <p className=\"text-2xl font-bold\">{stats.totalAlerts}</p>\n              <p className=\"text-xs text-muted-foreground\">Total alertes</p>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-4 text-center\">\n              <Clock className=\"w-8 h-8 text-yellow-500 mx-auto mb-2\" />\n              <p className=\"text-2xl font-bold\">{stats.pendingAlerts}</p>\n              <p className=\"text-xs text-muted-foreground\">En attente</p>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-4 text-center\">\n              <CheckCircle className=\"w-8 h-8 text-green-500 mx-auto mb-2\" />\n              <p className=\"text-2xl font-bold\">{stats.confirmedAlerts}</p>\n              <p className=\"text-xs text-muted-foreground\">Confirmées</p>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-4 text-center\">\n              <XCircle className=\"w-8 h-8 text-gray-500 mx-auto mb-2\" />\n              <p className=\"text-2xl font-bold\">{stats.fakeAlerts}</p>\n              <p className=\"text-xs text-muted-foreground\">Fausses</p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Management Tabs */}\n        <Tabs defaultValue=\"users\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-2\">\n            <TabsTrigger value=\"users\">Gestion des utilisateurs</TabsTrigger>\n            <TabsTrigger value=\"alerts\">Gestion des alertes</TabsTrigger>\n          </TabsList>\n\n          {/* Users Management */}\n          <TabsContent value=\"users\" className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\n                  <div>\n                    <CardTitle>Utilisateurs</CardTitle>\n                    <CardDescription>Gérez les comptes utilisateurs et leurs permissions</CardDescription>\n                  </div>\n                  <div className=\"flex flex-col sm:flex-row gap-2 w-full sm:w-auto\">\n                    <div className=\"relative\">\n                      <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                      <Input\n                        placeholder=\"Rechercher un utilisateur...\"\n                        className=\"pl-10 w-full sm:w-64\"\n                        value={searchUsers}\n                        onChange={(e) => setSearchUsers(e.target.value)}\n                        data-testid=\"input-search-users\"\n                      />\n                    </div>\n                    <Select value={userFilter} onValueChange={setUserFilter}>\n                      <SelectTrigger className=\"w-full sm:w-48\" data-testid=\"select-user-filter\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"all\">Tous les utilisateurs</SelectItem>\n                        <SelectItem value=\"active\">Actifs</SelectItem>\n                        <SelectItem value=\"suspended\">Suspendus</SelectItem>\n                        <SelectItem value=\"verified\">Vérifiés</SelectItem>\n                        <SelectItem value=\"unverified\">Non vérifiés</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"rounded-md border\">\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>Utilisateur</TableHead>\n                        <TableHead>Contact</TableHead>\n                        <TableHead>Statut</TableHead>\n                        <TableHead>Activité</TableHead>\n                        <TableHead>Actions</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {filteredUsers.map((user) => (\n                        <TableRow key={user.id}>\n                          <TableCell>\n                            <div className=\"flex items-center gap-3\">\n                              <Avatar className=\"w-8 h-8\">\n                                <AvatarImage src={user.avatar} alt={user.name} />\n                                <AvatarFallback>{user.name.charAt(0)}</AvatarFallback>\n                              </Avatar>\n                              <div>\n                                <div className=\"flex items-center gap-2\">\n                                  <span className=\"font-medium\">{user.name}</span>\n                                  {user.hasCIN && (\n                                    <Shield className=\"w-4 h-4 text-green-400\" />\n                                  )}\n                                </div>\n                                <p className=\"text-sm text-muted-foreground\">\n                                  Inscrit le {user.joinedAt}\n                                </p>\n                              </div>\n                            </div>\n                          </TableCell>\n                          <TableCell>\n                            <div className=\"text-sm\">\n                              <p>{user.phone}</p>\n                            </div>\n                          </TableCell>\n                          <TableCell>\n                            {getStatusBadge(user.status)}\n                          </TableCell>\n                          <TableCell>\n                            <div className=\"text-sm\">\n                              <p>{user.alertsCount} alertes</p>\n                              <p className=\"text-muted-foreground\">{user.validationsCount} validations</p>\n                            </div>\n                          </TableCell>\n                          <TableCell>\n                            <DropdownMenu>\n                              <DropdownMenuTrigger asChild>\n                                <Button variant=\"ghost\" size=\"icon\" data-testid={`button-user-actions-${user.id}`}>\n                                  <MoreHorizontal className=\"w-4 h-4\" />\n                                </Button>\n                              </DropdownMenuTrigger>\n                              <DropdownMenuContent align=\"end\">\n                                <DropdownMenuItem \n                                  onClick={() => onUserAction?.(user.id, 'edit')}\n                                >\n                                  <UserCheck className=\"mr-2 h-4 w-4\" />\n                                  Modifier\n                                </DropdownMenuItem>\n                                <DropdownMenuItem \n                                  onClick={() => onUserAction?.(user.id, user.status === 'suspended' ? 'activate' : 'suspend')}\n                                >\n                                  {user.status === 'suspended' ? (\n                                    <>\n                                      <UserCheck className=\"mr-2 h-4 w-4\" />\n                                      Réactiver\n                                    </>\n                                  ) : (\n                                    <>\n                                      <UserX className=\"mr-2 h-4 w-4\" />\n                                      Suspendre\n                                    </>\n                                  )}\n                                </DropdownMenuItem>\n                                <DropdownMenuSeparator />\n                                <DropdownMenuItem \n                                  onClick={() => onUserAction?.(user.id, 'delete')}\n                                  className=\"text-destructive\"\n                                >\n                                  <Trash2 className=\"mr-2 h-4 w-4\" />\n                                  Supprimer\n                                </DropdownMenuItem>\n                              </DropdownMenuContent>\n                            </DropdownMenu>\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Alerts Management */}\n          <TabsContent value=\"alerts\" className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\n                  <div>\n                    <CardTitle>Alertes</CardTitle>\n                    <CardDescription>Modérez et gérez les alertes de la plateforme</CardDescription>\n                  </div>\n                  <div className=\"flex flex-col sm:flex-row gap-2 w-full sm:w-auto\">\n                    <div className=\"relative\">\n                      <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                      <Input\n                        placeholder=\"Rechercher une alerte...\"\n                        className=\"pl-10 w-full sm:w-64\"\n                        value={searchAlerts}\n                        onChange={(e) => setSearchAlerts(e.target.value)}\n                        data-testid=\"input-search-alerts\"\n                      />\n                    </div>\n                    <Select value={alertFilter} onValueChange={setAlertFilter}>\n                      <SelectTrigger className=\"w-full sm:w-48\" data-testid=\"select-alert-filter\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"all\">Toutes les alertes</SelectItem>\n                        <SelectItem value=\"pending\">En attente</SelectItem>\n                        <SelectItem value=\"confirmed\">Confirmées</SelectItem>\n                        <SelectItem value=\"fake\">Fausses alertes</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"rounded-md border\">\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>Alerte</TableHead>\n                        <TableHead>Auteur</TableHead>\n                        <TableHead>Localisation</TableHead>\n                        <TableHead>Statut</TableHead>\n                        <TableHead>Validations</TableHead>\n                        <TableHead>Actions</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {filteredAlerts.map((alert) => (\n                        <TableRow key={alert.id}>\n                          <TableCell>\n                            <div>\n                              <p className=\"font-medium\">{alert.reason}</p>\n                              <p className=\"text-sm text-muted-foreground\">{alert.timestamp}</p>\n                            </div>\n                          </TableCell>\n                          <TableCell>\n                            <span className=\"text-sm\">{alert.author}</span>\n                          </TableCell>\n                          <TableCell>\n                            <span className=\"text-sm\">{alert.location}</span>\n                          </TableCell>\n                          <TableCell>\n                            {getAlertStatusBadge(alert.status)}\n                          </TableCell>\n                          <TableCell>\n                            <div className=\"text-sm\">\n                              <p className=\"text-green-400\">+{alert.validations.confirmed}</p>\n                              <p className=\"text-red-400\">-{alert.validations.rejected}</p>\n                            </div>\n                          </TableCell>\n                          <TableCell>\n                            <DropdownMenu>\n                              <DropdownMenuTrigger asChild>\n                                <Button variant=\"ghost\" size=\"icon\" data-testid={`button-alert-actions-${alert.id}`}>\n                                  <MoreHorizontal className=\"w-4 h-4\" />\n                                </Button>\n                              </DropdownMenuTrigger>\n                              <DropdownMenuContent align=\"end\">\n                                <DropdownMenuItem \n                                  onClick={() => onAlertAction?.(alert.id, 'confirm')}\n                                >\n                                  <CheckCircle className=\"mr-2 h-4 w-4\" />\n                                  Forcer confirmation\n                                </DropdownMenuItem>\n                                <DropdownMenuItem \n                                  onClick={() => onAlertAction?.(alert.id, 'fake')}\n                                >\n                                  <XCircle className=\"mr-2 h-4 w-4\" />\n                                  Marquer fausse\n                                </DropdownMenuItem>\n                                <DropdownMenuSeparator />\n                                <DropdownMenuItem \n                                  onClick={() => onAlertAction?.(alert.id, 'delete')}\n                                  className=\"text-destructive\"\n                                >\n                                  <Trash2 className=\"mr-2 h-4 w-4\" />\n                                  Supprimer\n                                </DropdownMenuItem>\n                              </DropdownMenuContent>\n                            </DropdownMenu>\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}","size_bytes":20918},"client/src/components/AlertCard.tsx":{"content":"import { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { \n  AlertTriangle, \n  MapPin, \n  Clock, \n  ThumbsUp, \n  ThumbsDown, \n  Shield,\n  MoreHorizontal,\n  CheckCircle \n} from \"lucide-react\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { useState } from \"react\";\n\ninterface AlertCardProps {\n  alert: {\n    id: string;\n    reason: string;\n    description: string;\n    location: string;\n    status: 'pending' | 'confirmed' | 'fake' | 'resolved';\n    urgency: 'low' | 'medium' | 'high';\n    timestamp: string;\n    author: {\n      id: string;\n      name: string;\n      avatar?: string;\n      hasCIN: boolean;\n    };\n    validations: {\n      confirmed: number;\n      rejected: number;\n    };\n    media?: string;\n  };\n  onValidate?: (alertId: string, validation: 'confirm' | 'reject' | 'resolved', comment?: string) => void;\n  onViewDetails?: (alertId: string) => void;\n  currentUserId?: string;\n  showActions?: boolean;\n}\n\nexport default function AlertCard({ \n  alert, \n  onValidate, \n  onViewDetails, \n  currentUserId,\n  showActions = true \n}: AlertCardProps) {\n  const [rejectComment, setRejectComment] = useState('');\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [resolveComment, setResolveComment] = useState('');\n  const [isResolveDialogOpen, setIsResolveDialogOpen] = useState(false);\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'confirmed': return 'bg-green-500/20 text-green-400 border-green-500/30';\n      case 'fake': return 'bg-gray-500/20 text-gray-400 border-gray-500/30';\n      case 'resolved': return 'bg-blue-500/20 text-blue-400 border-blue-500/30';\n      default: return 'bg-yellow-500/20 text-yellow-400 border-yellow-500/30';\n    }\n  };\n\n  const getUrgencyColor = (urgency: string) => {\n    switch (urgency) {\n      case 'high': return 'bg-red-500/20 text-red-400 border-red-500/30';\n      case 'medium': return 'bg-orange-500/20 text-orange-400 border-orange-500/30';\n      default: return 'bg-blue-500/20 text-blue-400 border-blue-500/30';\n    }\n  };\n\n  const getStatusText = (status: string) => {\n    switch (status) {\n      case 'confirmed': return 'Confirmée';\n      case 'fake': return 'Fausse alerte';\n      case 'resolved': return 'Réglée';\n      default: return 'En validation';\n    }\n  };\n\n  const getUrgencyText = (urgency: string) => {\n    switch (urgency) {\n      case 'high': return 'Urgent';\n      case 'medium': return 'Modéré';\n      default: return 'Info';\n    }\n  };\n\n  return (\n    <Card className=\"hover-elevate\">\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-start justify-between\">\n          <div className=\"flex items-center gap-3\">\n            <Avatar className=\"w-8 h-8\">\n              <AvatarImage src={alert.author.avatar} alt={alert.author.name} />\n              <AvatarFallback>{alert.author.name.charAt(0)}</AvatarFallback>\n            </Avatar>\n            <div>\n              <div className=\"flex items-center gap-2\">\n                <span className=\"font-medium text-sm\">{alert.author.name}</span>\n                {alert.author.hasCIN && (\n                  <Shield className=\"w-4 h-4 text-green-400\" />\n                )}\n              </div>\n              <div className=\"flex items-center gap-2 text-xs text-muted-foreground\">\n                <Clock className=\"w-3 h-3\" />\n                {alert.timestamp}\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center gap-2\">\n            <Badge className={getStatusColor(alert.status)} data-testid={`status-${alert.status}`}>\n              {getStatusText(alert.status)}\n            </Badge>\n            <Badge className={getUrgencyColor(alert.urgency)}>\n              {getUrgencyText(alert.urgency)}\n            </Badge>\n          </div>\n        </div>\n      </CardHeader>\n\n      <CardContent className=\"space-y-3\">\n        <div>\n          <h3 className=\"font-semibold text-base mb-1\">{alert.reason}</h3>\n          <p className=\"text-sm text-muted-foreground line-clamp-2\">\n            {alert.description}\n          </p>\n        </div>\n\n        <div className=\"flex items-center gap-1 text-sm text-muted-foreground\">\n          <MapPin className=\"w-4 h-4\" />\n          <span>{alert.location}</span>\n        </div>\n\n        {alert.media && (\n          <div className=\"bg-muted/50 rounded-lg p-3 text-center\">\n            <div className=\"w-8 h-8 mx-auto mb-2 bg-primary/20 rounded-full flex items-center justify-center\">\n              <AlertTriangle className=\"w-4 h-4 text-primary\" />\n            </div>\n            <p className=\"text-xs text-muted-foreground\">Média joint disponible</p>\n          </div>\n        )}\n\n        {showActions && (alert.status === 'pending' || alert.status === 'confirmed') && (\n          <div className=\"flex items-center justify-between pt-2 border-t border-border\">\n            <div className=\"flex items-center gap-4 text-xs text-muted-foreground\">\n              <span>{alert.validations.confirmed} confirmations</span>\n              <span>{alert.validations.rejected} rejets</span>\n            </div>\n            \n            <div className=\"flex gap-2\">\n              <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n                <DialogTrigger asChild>\n                  <Button \n                    size=\"sm\" \n                    variant=\"outline\"\n                    className=\"h-8 px-3\"\n                    data-testid=\"button-reject\"\n                  >\n                    <ThumbsDown className=\"w-3 h-3 mr-1\" />\n                    Rejeter\n                  </Button>\n                </DialogTrigger>\n                <DialogContent className=\"sm:max-w-md\">\n                  <DialogHeader>\n                    <DialogTitle>Rejeter l'alerte</DialogTitle>\n                    <DialogDescription>\n                      Pourquoi rejetez-vous cette alerte ? Votre commentaire aidera la communauté.\n                    </DialogDescription>\n                  </DialogHeader>\n                  <div className=\"space-y-4\">\n                    <Textarea\n                      placeholder=\"Expliquez pourquoi cette alerte n'est pas valide...\"\n                      value={rejectComment}\n                      onChange={(e) => setRejectComment(e.target.value)}\n                      className=\"min-h-[100px]\"\n                      data-testid=\"textarea-reject-comment\"\n                    />\n                  </div>\n                  <DialogFooter className=\"gap-2\">\n                    <Button \n                      variant=\"outline\" \n                      onClick={() => {\n                        setIsDialogOpen(false);\n                        setRejectComment('');\n                      }}\n                    >\n                      Annuler\n                    </Button>\n                    <Button \n                      onClick={() => {\n                        onValidate?.(alert.id, 'reject', rejectComment);\n                        setIsDialogOpen(false);\n                        setRejectComment('');\n                      }}\n                      disabled={!rejectComment.trim()}\n                      data-testid=\"button-confirm-reject\"\n                    >\n                      Rejeter l'alerte\n                    </Button>\n                  </DialogFooter>\n                </DialogContent>\n              </Dialog>\n              {alert.status === 'pending' && (\n                <Button \n                  size=\"sm\"\n                  className=\"h-8 px-3\"\n                  onClick={() => onValidate?.(alert.id, 'confirm')}\n                  data-testid=\"button-confirm\"\n                >\n                  <ThumbsUp className=\"w-3 h-3 mr-1\" />\n                  Confirmer\n                </Button>\n              )}\n              {alert.status === 'confirmed' && currentUserId === alert.author.id && (\n                <Dialog open={isResolveDialogOpen} onOpenChange={setIsResolveDialogOpen}>\n                  <DialogTrigger asChild>\n                    <Button \n                      size=\"sm\"\n                      className=\"h-8 px-3 bg-blue-600 hover:bg-blue-700\"\n                      data-testid=\"button-resolve\"\n                    >\n                      <CheckCircle className=\"w-3 h-3 mr-1\" />\n                      Marquer réglé\n                    </Button>\n                  </DialogTrigger>\n                  <DialogContent className=\"sm:max-w-md\">\n                    <DialogHeader>\n                      <DialogTitle>Marquer comme réglé</DialogTitle>\n                      <DialogDescription>\n                        Cette alerte a-t-elle été résolue ? Ajoutez un commentaire pour expliquer.\n                      </DialogDescription>\n                    </DialogHeader>\n                    <div className=\"space-y-4\">\n                      <Textarea\n                        placeholder=\"Expliquez comment cette situation a été réglée...\"\n                        value={resolveComment}\n                        onChange={(e) => setResolveComment(e.target.value)}\n                        className=\"min-h-[100px]\"\n                        data-testid=\"textarea-resolve-comment\"\n                      />\n                    </div>\n                    <DialogFooter className=\"gap-2\">\n                      <Button \n                        variant=\"outline\"\n                        onClick={() => {\n                          setIsResolveDialogOpen(false);\n                          setResolveComment('');\n                        }}\n                      >\n                        Annuler\n                      </Button>\n                      <Button \n                        onClick={() => {\n                          onValidate?.(alert.id, 'resolved', resolveComment);\n                          setIsResolveDialogOpen(false);\n                          setResolveComment('');\n                        }}\n                        disabled={!resolveComment.trim()}\n                        data-testid=\"button-confirm-resolve\"\n                      >\n                        Marquer réglé\n                      </Button>\n                    </DialogFooter>\n                  </DialogContent>\n                </Dialog>\n              )}\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":10605},"client/src/components/AppSidebar.tsx":{"content":"import {\n  Sidebar,\n  SidebarContent,\n  SidebarGroup,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarHeader,\n  SidebarFooter,\n} from \"@/components/ui/sidebar\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { \n  Home, \n  AlertTriangle, \n  MapPin, \n  User, \n  Shield, \n  LogOut,\n  Settings,\n  Phone\n} from \"lucide-react\";\nimport { useLocation } from \"wouter\";\nimport genZLogo from \"@assets/genzlogo_1758921534790.jpeg\";\n\ninterface AppSidebarProps {\n  user?: {\n    name: string;\n    avatar?: string;\n    hasCIN: boolean;\n    isAdmin?: boolean;\n  };\n  onLogout?: () => void;\n}\n\nexport default function AppSidebar({ user, onLogout }: AppSidebarProps) {\n  const [location, setLocation] = useLocation();\n\n  const mainItems = [\n    {\n      title: \"Alertes\",\n      url: \"/dashboard\",\n      icon: AlertTriangle,\n    },\n    {\n      title: \"Carte\",\n      url: \"/map\",\n      icon: MapPin,\n    },\n    {\n      title: \"Contacts Urgence\",\n      url: \"/emergency\",\n      icon: Phone,\n    },\n    {\n      title: \"Mon Profil\",\n      url: \"/profile\",\n      icon: User,\n    },\n  ];\n\n  const adminItems = user?.isAdmin ? [\n    {\n      title: \"Administration\",\n      url: \"/admin\",\n      icon: Shield,\n    },\n  ] : [];\n\n  const isActive = (path: string) => location === path;\n\n  return (\n    <Sidebar>\n      <SidebarHeader className=\"border-b border-sidebar-border p-4\">\n        <div className=\"flex items-center gap-3\">\n          <img src={genZLogo} alt=\"Gasy Iray\" className=\"w-8 h-8 rounded-md\" />\n          <div>\n            <h2 className=\"text-lg font-bold\">Gasy Iray</h2>\n            <p className=\"text-xs text-sidebar-foreground/70\">Plateforme de Sécurité</p>\n          </div>\n        </div>\n      </SidebarHeader>\n\n      <SidebarContent>\n        <SidebarGroup>\n          <SidebarGroupLabel>Navigation</SidebarGroupLabel>\n          <SidebarGroupContent>\n            <SidebarMenu>\n              {mainItems.map((item) => (\n                <SidebarMenuItem key={item.title}>\n                  <SidebarMenuButton \n                    onClick={() => setLocation(item.url)}\n                    data-active={isActive(item.url)}\n                    className=\"data-[active=true]:bg-sidebar-accent\"\n                    data-testid={`nav-${item.title.toLowerCase().replace(' ', '-')}`}\n                  >\n                    <item.icon />\n                    <span>{item.title}</span>\n                  </SidebarMenuButton>\n                </SidebarMenuItem>\n              ))}\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n\n        {adminItems.length > 0 && (\n          <SidebarGroup>\n            <SidebarGroupLabel>Administration</SidebarGroupLabel>\n            <SidebarGroupContent>\n              <SidebarMenu>\n                {adminItems.map((item) => (\n                  <SidebarMenuItem key={item.title}>\n                    <SidebarMenuButton \n                      onClick={() => setLocation(item.url)}\n                      data-active={isActive(item.url)}\n                      className=\"data-[active=true]:bg-sidebar-accent\"\n                      data-testid={`nav-${item.title.toLowerCase().replace(' ', '-')}`}\n                    >\n                      <item.icon />\n                      <span>{item.title}</span>\n                    </SidebarMenuButton>\n                  </SidebarMenuItem>\n                ))}\n              </SidebarMenu>\n            </SidebarGroupContent>\n          </SidebarGroup>\n        )}\n      </SidebarContent>\n\n      <SidebarFooter className=\"border-t border-sidebar-border p-4\">\n        {user && (\n          <div className=\"space-y-3\">\n            <div className=\"flex items-center gap-3\">\n              <Avatar className=\"w-8 h-8\">\n                <AvatarImage src={user.avatar} alt={user.name} />\n                <AvatarFallback>{user.name.charAt(0)}</AvatarFallback>\n              </Avatar>\n              <div className=\"flex-1 min-w-0\">\n                <div className=\"flex items-center gap-2\">\n                  <p className=\"text-sm font-medium truncate\">{user.name}</p>\n                  {user.hasCIN && (\n                    <Shield className=\"w-3 h-3 text-green-400 flex-shrink-0\" />\n                  )}\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <Badge \n                    className={user.hasCIN \n                      ? \"bg-green-500/20 text-green-400 border-green-500/30 text-xs\" \n                      : \"bg-yellow-500/20 text-yellow-400 border-yellow-500/30 text-xs\"\n                    }\n                  >\n                    {user.hasCIN ? 'Vérifié' : 'En attente'}\n                  </Badge>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"flex gap-2\">\n              <Button \n                variant=\"ghost\" \n                size=\"sm\" \n                className=\"flex-1 h-8\"\n                onClick={() => setLocation('/profile')}\n                data-testid=\"button-sidebar-profile\"\n              >\n                <Settings className=\"w-4 h-4\" />\n              </Button>\n              <Button \n                variant=\"ghost\" \n                size=\"sm\" \n                className=\"flex-1 h-8\"\n                onClick={onLogout}\n                data-testid=\"button-sidebar-logout\"\n              >\n                <LogOut className=\"w-4 h-4\" />\n              </Button>\n            </div>\n          </div>\n        )}\n      </SidebarFooter>\n    </Sidebar>\n  );\n}","size_bytes":5660},"client/src/components/AuthForm.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useState } from \"react\";\nimport { Eye, EyeOff, Phone, User, Lock } from \"lucide-react\";\nimport genZLogo from \"@assets/genzlogo_1758921534790.jpeg\";\n\ninterface AuthFormProps {\n  mode: 'login' | 'register';\n  onSubmit?: (data: any) => void;\n  onToggleMode?: () => void;\n  loading?: boolean;\n  error?: string;\n}\n\nexport default function AuthForm({ mode, onSubmit, onToggleMode, loading, error }: AuthFormProps) {\n  const [showPassword, setShowPassword] = useState(false);\n  const [formData, setFormData] = useState({\n    name: '',\n    phone: '',\n    password: ''\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    console.log(`${mode} form submitted:`, formData);\n    onSubmit?.(formData);\n  };\n\n  const handleChange = (field: string, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center px-4 bg-gradient-to-b from-background to-secondary/20\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n          <div className=\"flex justify-center mb-4\">\n            <img src={genZLogo} alt=\"Gasy Iray\" className=\"w-16 h-16 rounded-lg\" />\n          </div>\n          <CardTitle className=\"text-2xl font-bold\">\n            {mode === 'login' ? 'Connexion' : 'Créer un compte'}\n          </CardTitle>\n          <CardDescription>\n            {mode === 'login' \n              ? 'Connectez-vous à Gasy Iray' \n              : 'Rejoignez Gasy Iray'}\n          </CardDescription>\n        </CardHeader>\n\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            {mode === 'register' && (\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"name\">Nom complet</Label>\n                <div className=\"relative\">\n                  <User className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                  <Input\n                    id=\"name\"\n                    type=\"text\"\n                    placeholder=\"Votre nom complet\"\n                    className=\"pl-10\"\n                    value={formData.name}\n                    onChange={(e) => handleChange('name', e.target.value)}\n                    data-testid=\"input-name\"\n                    required\n                  />\n                </div>\n              </div>\n            )}\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"phone\">Numéro de téléphone</Label>\n              <div className=\"relative\">\n                <Phone className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  id=\"phone\"\n                  type=\"tel\"\n                  placeholder=\"+33 6 12 34 56 78\"\n                  className=\"pl-10\"\n                  value={formData.phone}\n                  onChange={(e) => handleChange('phone', e.target.value)}\n                  data-testid=\"input-phone\"\n                  required\n                />\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\">Mot de passe</Label>\n              <div className=\"relative\">\n                <Lock className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  id=\"password\"\n                  type={showPassword ? \"text\" : \"password\"}\n                  placeholder=\"••••••••\"\n                  className=\"pl-10 pr-10\"\n                  value={formData.password}\n                  onChange={(e) => handleChange('password', e.target.value)}\n                  data-testid=\"input-password\"\n                  required\n                />\n                <Button\n                  type=\"button\"\n                  variant=\"ghost\"\n                  size=\"icon\"\n                  className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                  onClick={() => setShowPassword(!showPassword)}\n                  data-testid=\"button-toggle-password\"\n                >\n                  {showPassword ? (\n                    <EyeOff className=\"h-4 w-4 text-muted-foreground\" />\n                  ) : (\n                    <Eye className=\"h-4 w-4 text-muted-foreground\" />\n                  )}\n                </Button>\n              </div>\n            </div>\n\n            {error && (\n              <div className=\"text-sm text-destructive bg-destructive/10 p-3 rounded-md\" data-testid=\"text-error\">\n                {error}\n              </div>\n            )}\n\n            <Button \n              type=\"submit\" \n              className=\"w-full\" \n              disabled={loading}\n              data-testid=\"button-submit\"\n            >\n              {loading ? 'Chargement...' : (mode === 'login' ? 'Se connecter' : 'Créer le compte')}\n            </Button>\n          </form>\n\n          <div className=\"mt-6 text-center\">\n            <span className=\"text-sm text-muted-foreground\">\n              {mode === 'login' ? \"Pas encore de compte ?\" : \"Déjà un compte ?\"}\n            </span>\n            <Button \n              variant=\"ghost\" \n              className=\"ml-2 h-auto p-0 text-sm\"\n              onClick={onToggleMode}\n              data-testid=\"button-toggle-mode\"\n            >\n              {mode === 'login' ? 'Créer un compte' : 'Se connecter'}\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":5672},"client/src/components/Dashboard.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useState } from \"react\";\nimport { Plus, AlertTriangle, Shield, Clock } from \"lucide-react\";\nimport AlertCard from \"./AlertCard\";\nimport SOSForm from \"./SOSForm\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\n\ninterface DashboardProps {\n  user?: {\n    name: string;\n    hasCIN: boolean;\n  };\n}\n\nexport default function Dashboard({ user }: DashboardProps) {\n  const [showSOSForm, setShowSOSForm] = useState(false);\n  const [activeTab, setActiveTab] = useState('all');\n\n  // todo: remove mock functionality\n  type AlertStatus = 'pending' | 'confirmed' | 'fake' | 'resolved';\n  \n  const initialAlerts: Array<{\n    id: string;\n    reason: string;\n    description: string;\n    location: string;\n    status: AlertStatus;\n    urgency: 'low' | 'medium' | 'high';\n    timestamp: string;\n    author: {\n      id: string;\n      name: string;\n      avatar?: string;\n      hasCIN: boolean;\n    };\n    validations: {\n      confirmed: number;\n      rejected: number;\n    };\n    media?: string;\n  }> = [\n    {\n      id: '1',\n      reason: 'Agression',\n      description: 'Tentative d\\'agression à Analakely, individu s\\'est enfui vers Andohalo.',\n      location: 'Analakely, Antananarivo',\n      status: 'pending',\n      urgency: 'high',\n      timestamp: 'Il y a 15 minutes',\n      author: {\n        id: 'usr_naina_001',\n        name: 'Naina Razafy',\n        avatar: 'https://images.unsplash.com/photo-1494790108755-2616b169db2c?w=32&h=32&fit=crop&crop=face',\n        hasCIN: true\n      },\n      validations: { confirmed: 2, rejected: 0 },\n      media: 'photo.jpg'\n    },\n    {\n      id: '2',\n      reason: 'Vol',\n      description: 'Vol de sac signalé près du marché d\\'Andravoahangy. Individu aperçu avec un sac rouge.',\n      location: 'Marché Andravoahangy, Antananarivo',\n      status: 'confirmed',\n      urgency: 'medium',\n      timestamp: 'Il y a 1 heure',\n      author: {\n        id: 'usr_hery_002',\n        name: 'Hery Andriana',\n        hasCIN: false\n      },\n      validations: { confirmed: 5, rejected: 1 }\n    },\n    {\n      id: '3',\n      reason: 'Harcèlement',\n      description: 'Harcèlement signalé avenue de l\\'Indépendance, plusieurs témoins présents.',\n      location: 'Avenue de l\\'Indépendance, Antananarivo',\n      status: 'fake',\n      urgency: 'low',\n      timestamp: 'Il y a 3 heures',\n      author: {\n        id: 'usr_miora_003',\n        name: 'Miora Rakoto',\n        hasCIN: false\n      },\n      validations: { confirmed: 1, rejected: 4 }\n    }\n  ];\n\n  const [alerts, setAlerts] = useState(initialAlerts);\n\n  const handleValidation = (alertId: string, validation: 'confirm' | 'reject' | 'resolved', comment?: string) => {\n    console.log('Validation:', alertId, validation, comment);\n    \n    setAlerts(prevAlerts => \n      prevAlerts.map(alert => {\n        if (alert.id === alertId) {\n          let newStatus = alert.status;\n          let newValidations = alert.validations;\n          \n          switch (validation) {\n            case 'confirm':\n              newStatus = 'confirmed';\n              newValidations = { ...alert.validations, confirmed: alert.validations.confirmed + 1 };\n              break;\n            case 'reject':\n              newStatus = 'fake';\n              newValidations = { ...alert.validations, rejected: alert.validations.rejected + 1 };\n              break;\n            case 'resolved':\n              newStatus = 'resolved';\n              break;\n          }\n          \n          return { ...alert, status: newStatus, validations: newValidations };\n        }\n        return alert;\n      })\n    );\n  };\n\n  const stats = {\n    total: alerts.length,\n    pending: alerts.filter(a => a.status === 'pending').length,\n    confirmed: alerts.filter(a => a.status === 'confirmed').length,\n    fake: alerts.filter(a => a.status === 'fake').length\n  };\n\n  const filteredAlerts = alerts.filter(alert => {\n    return activeTab === 'all' || alert.status === activeTab;\n  });\n\n  return (\n    <div className=\"container mx-auto px-4 py-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Alertes SOS</h1>\n          <p className=\"text-muted-foreground\">\n            Valider les alertes de la communauté\n          </p>\n        </div>\n        <Button \n          onClick={() => setShowSOSForm(true)}\n          className=\"gap-2\"\n          data-testid=\"button-create-alert\"\n        >\n          <Plus className=\"w-4 h-4\" />\n          Nouvelle Alerte\n        </Button>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center gap-2\">\n              <AlertTriangle className=\"w-8 h-8 text-primary\" />\n              <div>\n                <p className=\"text-2xl font-bold\">{stats.total}</p>\n                <p className=\"text-xs text-muted-foreground\">Total alertes</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center gap-2\">\n              <Clock className=\"w-8 h-8 text-yellow-500\" />\n              <div>\n                <p className=\"text-2xl font-bold\">{stats.pending}</p>\n                <p className=\"text-xs text-muted-foreground\">En validation</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center gap-2\">\n              <Shield className=\"w-8 h-8 text-green-500\" />\n              <div>\n                <p className=\"text-2xl font-bold\">{stats.confirmed}</p>\n                <p className=\"text-xs text-muted-foreground\">Confirmées</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center gap-2\">\n              <div className=\"w-8 h-8 rounded-full bg-gray-500/20 flex items-center justify-center\">\n                <span className=\"text-gray-400 font-bold\">!</span>\n              </div>\n              <div>\n                <p className=\"text-2xl font-bold\">{stats.fake}</p>\n                <p className=\"text-xs text-muted-foreground\">Fausses</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Filters */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Alertes de la communauté</CardTitle>\n          <CardDescription>\n            Consultez et validez les alertes signalées par la communauté\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n\n          <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-4\">\n              <TabsTrigger value=\"all\">Toutes</TabsTrigger>\n              <TabsTrigger value=\"pending\">En cours</TabsTrigger>\n              <TabsTrigger value=\"confirmed\">Confirmées</TabsTrigger>\n              <TabsTrigger value=\"fake\">Fausses</TabsTrigger>\n            </TabsList>\n            \n            <TabsContent value={activeTab} className=\"mt-4\">\n              <div className=\"space-y-4\">\n                {filteredAlerts.length > 0 ? (\n                  filteredAlerts.map((alert) => (\n                    <AlertCard\n                      key={alert.id}\n                      alert={alert}\n                      onValidate={handleValidation}\n                      onViewDetails={(id) => console.log('View details:', id)}\n                      currentUserId={user?.id || \"usr_naina_001\"}\n                      showActions={true}\n                    />\n                  ))\n                ) : (\n                  <div className=\"text-center py-8 text-muted-foreground\">\n                    <AlertTriangle className=\"w-12 h-12 mx-auto mb-4 opacity-50\" />\n                    <p>Aucune alerte trouvée avec les filtres actuels</p>\n                  </div>\n                )}\n              </div>\n            </TabsContent>\n          </Tabs>\n        </CardContent>\n      </Card>\n\n      {/* SOS Form Dialog */}\n      <Dialog open={showSOSForm} onOpenChange={setShowSOSForm}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Créer une alerte SOS</DialogTitle>\n          </DialogHeader>\n          <SOSForm \n            onSubmit={(data) => {\n              console.log('SOS submitted:', data);\n              setShowSOSForm(false);\n            }}\n            onClose={() => setShowSOSForm(false)}\n          />\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":9044},"client/src/components/Header.tsx":{"content":"import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Button } from \"@/components/ui/button\";\nimport { \n  DropdownMenu, \n  DropdownMenuContent, \n  DropdownMenuItem, \n  DropdownMenuSeparator, \n  DropdownMenuTrigger \n} from \"@/components/ui/dropdown-menu\";\nimport { Bell, LogOut, Settings, User } from \"lucide-react\";\nimport genZLogo from \"@assets/genzlogo_1758921534790.jpeg\";\n\ninterface HeaderProps {\n  user?: { name: string; avatar?: string };\n  onLogout?: () => void;\n  onProfile?: () => void;\n  onSettings?: () => void;\n}\n\nexport default function Header({ user, onLogout, onProfile, onSettings }: HeaderProps) {\n  return (\n    <header className=\"border-b border-border bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60 sticky top-0 z-50\">\n      <div className=\"container mx-auto px-4 h-16 flex items-center justify-between\">\n        <div className=\"flex items-center gap-4\">\n          <img src={genZLogo} alt=\"Gasy Iray\" className=\"w-10 h-10 rounded-lg\" />\n          <div>\n            <h1 className=\"text-xl font-bold text-foreground font-[family-name:var(--font-sans)]\">Gasy Iray</h1>\n            <p className=\"text-sm text-muted-foreground\">Plateforme de Sécurité</p>\n          </div>\n        </div>\n\n        <div className=\"flex items-center gap-4\">\n          {user ? (\n            <>\n              <Button variant=\"ghost\" size=\"icon\" data-testid=\"button-notifications\">\n                <Bell className=\"w-5 h-5\" />\n              </Button>\n              \n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <Button variant=\"ghost\" className=\"relative h-8 w-8 rounded-full\" data-testid=\"button-user-menu\">\n                    <Avatar className=\"h-8 w-8\">\n                      <AvatarImage src={user.avatar} alt={user.name} />\n                      <AvatarFallback>{user.name.charAt(0)}</AvatarFallback>\n                    </Avatar>\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent className=\"w-56\" align=\"end\" forceMount>\n                  <div className=\"flex flex-col space-y-1 p-2\">\n                    <p className=\"text-sm font-medium leading-none\">{user.name}</p>\n                    <p className=\"text-xs leading-none text-muted-foreground\">En ligne</p>\n                  </div>\n                  <DropdownMenuSeparator />\n                  <DropdownMenuItem onClick={onProfile} data-testid=\"link-profile\">\n                    <User className=\"mr-2 h-4 w-4\" />\n                    <span>Profil</span>\n                  </DropdownMenuItem>\n                  <DropdownMenuItem onClick={onSettings} data-testid=\"link-settings\">\n                    <Settings className=\"mr-2 h-4 w-4\" />\n                    <span>Paramètres</span>\n                  </DropdownMenuItem>\n                  <DropdownMenuSeparator />\n                  <DropdownMenuItem onClick={onLogout} data-testid=\"button-logout\">\n                    <LogOut className=\"mr-2 h-4 w-4\" />\n                    <span>Déconnexion</span>\n                  </DropdownMenuItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n            </>\n          ) : (\n            <div className=\"flex items-center gap-2\">\n              <Button variant=\"ghost\" data-testid=\"button-login\">Connexion</Button>\n              <Button data-testid=\"button-register\">Créer un compte</Button>\n            </div>\n          )}\n        </div>\n      </div>\n    </header>\n  );\n}","size_bytes":3513},"client/src/components/LandingHero.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Shield, Users, MapPin, AlertTriangle } from \"lucide-react\";\nimport genZLogo from \"@assets/genzlogo_1758921534790.jpeg\";\n\ninterface LandingHeroProps {\n  onLogin?: () => void;\n  onRegister?: () => void;\n}\n\nexport default function LandingHero({ onLogin, onRegister }: LandingHeroProps) {\n  return (\n    <div className=\"min-h-screen bg-gradient-to-b from-background to-secondary/20\">\n      <div className=\"container mx-auto px-4 py-16\">\n        {/* Hero Section */}\n        <div className=\"text-center mb-16\">\n          <div className=\"flex justify-center mb-8\">\n            <img src={genZLogo} alt=\"Gasy Iray\" className=\"w-24 h-24 rounded-xl\" />\n          </div>\n          \n          <h1 className=\"text-4xl md:text-6xl font-bold mb-6 bg-gradient-to-r from-primary to-white bg-clip-text text-transparent\">\n            Gasy Iray\n          </h1>\n          \n          <p className=\"text-xl md:text-2xl text-muted-foreground mb-8 max-w-2xl mx-auto\">\n            Plateforme communautaire de sécurité. Signalez, validez et restez informés des alertes dans votre zone.\n          </p>\n          \n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Button \n              size=\"lg\" \n              className=\"text-lg px-8 py-6 h-auto\"\n              onClick={() => window.location.href = '/demo'}\n              data-testid=\"button-demo-hero\"\n            >\n              Accéder à la démo\n            </Button>\n            <Button \n              variant=\"outline\" \n              size=\"lg\" \n              className=\"text-lg px-8 py-6 h-auto backdrop-blur-sm\"\n              onClick={onLogin}\n              data-testid=\"button-login-hero\"\n            >\n              Connexion\n            </Button>\n          </div>\n        </div>\n\n        {/* Features Grid */}\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-6 mb-16\">\n          <Card className=\"hover-elevate\">\n            <CardContent className=\"p-6 text-center\">\n              <Shield className=\"w-12 h-12 text-primary mx-auto mb-4\" />\n              <h3 className=\"text-lg font-semibold mb-2\">Sécurité Vérifiée</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                Système de validation communautaire pour des alertes fiables\n              </p>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"hover-elevate\">\n            <CardContent className=\"p-6 text-center\">\n              <Users className=\"w-12 h-12 text-primary mx-auto mb-4\" />\n              <h3 className=\"text-lg font-semibold mb-2\">Communauté Active</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                Rejoignez une communauté engagée pour la sécurité de tous\n              </p>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"hover-elevate\">\n            <CardContent className=\"p-6 text-center\">\n              <MapPin className=\"w-12 h-12 text-primary mx-auto mb-4\" />\n              <h3 className=\"text-lg font-semibold mb-2\">Géolocalisation</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                Carte interactive des zones d'insécurité en temps réel\n              </p>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"hover-elevate\">\n            <CardContent className=\"p-6 text-center\">\n              <AlertTriangle className=\"w-12 h-12 text-primary mx-auto mb-4\" />\n              <h3 className=\"text-lg font-semibold mb-2\">Alertes SOS</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                Signalement rapide avec validation automatique pour les utilisateurs vérifiés\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* CTA Section */}\n        <div className=\"text-center\">\n          <h2 className=\"text-3xl font-bold mb-4\">Prêt à rejoindre la communauté ?</h2>\n          <p className=\"text-lg text-muted-foreground mb-8\">\n            Commencez dès maintenant et contribuez à la sécurité de votre quartier\n          </p>\n          <Button \n            size=\"lg\" \n            className=\"text-lg px-8 py-6 h-auto\"\n            onClick={() => window.location.href = '/demo'}\n            data-testid=\"button-join-community\"\n          >\n            Découvrir la démo\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":4488},"client/src/components/MapView.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useState, useEffect } from \"react\";\nimport { MapPin, Filter, Navigation, AlertTriangle, Shield, Clock } from \"lucide-react\";\n\ninterface MapAlert {\n  id: string;\n  reason: string;\n  description: string;\n  location: string;\n  coordinates: { lat: number; lng: number };\n  status: 'pending' | 'confirmed' | 'fake';\n  urgency: 'low' | 'medium' | 'high';\n  timestamp: string;\n  author: {\n    name: string;\n    hasCIN: boolean;\n  };\n}\n\ninterface MapViewProps {\n  alerts?: MapAlert[];\n  onAlertClick?: (alert: MapAlert) => void;\n  centerLocation?: { lat: number; lng: number };\n}\n\nexport default function MapView({ alerts = [], onAlertClick, centerLocation }: MapViewProps) {\n  const [selectedAlert, setSelectedAlert] = useState<MapAlert | null>(null);\n  const [filterStatus, setFilterStatus] = useState('all');\n  const [filterUrgency, setFilterUrgency] = useState('all');\n\n  const filteredAlerts = alerts.filter(alert => {\n    const matchesStatus = filterStatus === 'all' || alert.status === filterStatus;\n    const matchesUrgency = filterUrgency === 'all' || alert.urgency === filterUrgency;\n    return matchesStatus && matchesUrgency;\n  });\n\n  const getMarkerColor = (status: string) => {\n    switch (status) {\n      case 'confirmed': return 'text-green-500';\n      case 'fake': return 'text-gray-500';\n      default: return 'text-yellow-500';\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'confirmed': return 'bg-green-500/20 text-green-400 border-green-500/30';\n      case 'fake': return 'bg-gray-500/20 text-gray-400 border-gray-500/30';\n      default: return 'bg-yellow-500/20 text-yellow-400 border-yellow-500/30';\n    }\n  };\n\n  const getUrgencyColor = (urgency: string) => {\n    switch (urgency) {\n      case 'high': return 'bg-red-500/20 text-red-400 border-red-500/30';\n      case 'medium': return 'bg-orange-500/20 text-orange-400 border-orange-500/30';\n      default: return 'bg-blue-500/20 text-blue-400 border-blue-500/30';\n    }\n  };\n\n  const getStatusText = (status: string) => {\n    switch (status) {\n      case 'confirmed': return 'Confirmée';\n      case 'fake': return 'Fausse';\n      default: return 'En validation';\n    }\n  };\n\n  return (\n    <div className=\"container mx-auto px-4 py-6\">\n      <div className=\"space-y-6\">\n        {/* Header */}\n        <div>\n          <h1 className=\"text-3xl font-bold\">Carte d'insécurité</h1>\n          <p className=\"text-muted-foreground\">\n            Visualisez les alertes de sécurité en temps réel sur la carte interactive\n          </p>\n        </div>\n\n        <div className=\"grid lg:grid-cols-3 gap-6\">\n          {/* Filters Sidebar */}\n          <Card className=\"lg:col-span-1\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Filter className=\"w-5 h-5\" />\n                Filtres\n              </CardTitle>\n              <CardDescription>\n                Filtrez les alertes par statut et urgence\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <label className=\"text-sm font-medium\">Statut</label>\n                <Select value={filterStatus} onValueChange={setFilterStatus}>\n                  <SelectTrigger data-testid=\"select-status-filter\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">Tous les statuts</SelectItem>\n                    <SelectItem value=\"pending\">En validation</SelectItem>\n                    <SelectItem value=\"confirmed\">Confirmées</SelectItem>\n                    <SelectItem value=\"fake\">Fausses alertes</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"space-y-2\">\n                <label className=\"text-sm font-medium\">Urgence</label>\n                <Select value={filterUrgency} onValueChange={setFilterUrgency}>\n                  <SelectTrigger data-testid=\"select-urgency-filter\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">Tous les niveaux</SelectItem>\n                    <SelectItem value=\"high\">Urgent</SelectItem>\n                    <SelectItem value=\"medium\">Modéré</SelectItem>\n                    <SelectItem value=\"low\">Information</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"space-y-3 pt-4 border-t border-border\">\n                <h4 className=\"text-sm font-medium\">Légende</h4>\n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center gap-2\">\n                    <MapPin className=\"w-4 h-4 text-yellow-500\" />\n                    <span className=\"text-sm\">En validation</span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <MapPin className=\"w-4 h-4 text-green-500\" />\n                    <span className=\"text-sm\">Confirmée</span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <MapPin className=\"w-4 h-4 text-gray-500\" />\n                    <span className=\"text-sm\">Fausse alerte</span>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"pt-4 border-t border-border\">\n                <div className=\"text-center space-y-2\">\n                  <p className=\"text-sm text-muted-foreground\">\n                    {filteredAlerts.length} alerte(s) affichée(s)\n                  </p>\n                  <Button \n                    variant=\"outline\" \n                    size=\"sm\" \n                    className=\"w-full\"\n                    data-testid=\"button-center-map\"\n                  >\n                    <Navigation className=\"w-4 h-4 mr-2\" />\n                    Centrer sur ma position\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Map and Alert Details */}\n          <div className=\"lg:col-span-2 space-y-6\">\n            {/* Map Container */}\n            <Card>\n              <CardContent className=\"p-0\">\n                <div className=\"relative h-96 bg-muted/50 rounded-lg overflow-hidden\">\n                  {/* Mock Map Interface */}\n                  <div className=\"absolute inset-0 bg-gradient-to-br from-slate-900 to-slate-800\">\n                    <div className=\"absolute inset-4 border-2 border-dashed border-muted-foreground/30 rounded-lg flex items-center justify-center\">\n                      <div className=\"text-center space-y-2\">\n                        <MapPin className=\"w-12 h-12 mx-auto text-primary\" />\n                        <h3 className=\"text-lg font-semibold\">Carte Interactive</h3>\n                        <p className=\"text-sm text-muted-foreground\">\n                          Carte Leaflet intégrée avec {filteredAlerts.length} marqueurs\n                        </p>\n                      </div>\n                    </div>\n\n                    {/* Mock Markers */}\n                    <div className=\"absolute top-8 left-8\">\n                      <Button \n                        size=\"icon\" \n                        variant=\"ghost\"\n                        className={`rounded-full ${getMarkerColor('pending')}`}\n                        onClick={() => setSelectedAlert(filteredAlerts[0])}\n                        data-testid=\"marker-1\"\n                      >\n                        <MapPin className=\"w-6 h-6\" />\n                      </Button>\n                    </div>\n                    <div className=\"absolute top-16 right-12\">\n                      <Button \n                        size=\"icon\" \n                        variant=\"ghost\"\n                        className={`rounded-full ${getMarkerColor('confirmed')}`}\n                        onClick={() => setSelectedAlert(filteredAlerts[1])}\n                        data-testid=\"marker-2\"\n                      >\n                        <MapPin className=\"w-6 h-6\" />\n                      </Button>\n                    </div>\n                    <div className=\"absolute bottom-8 left-1/3\">\n                      <Button \n                        size=\"icon\" \n                        variant=\"ghost\"\n                        className={`rounded-full ${getMarkerColor('fake')}`}\n                        onClick={() => setSelectedAlert(filteredAlerts[2])}\n                        data-testid=\"marker-3\"\n                      >\n                        <MapPin className=\"w-6 h-6\" />\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Alert Details */}\n            {selectedAlert && (\n              <Card>\n                <CardHeader>\n                  <div className=\"flex items-start justify-between\">\n                    <div>\n                      <CardTitle className=\"flex items-center gap-2\">\n                        <AlertTriangle className=\"w-5 h-5\" />\n                        Détails de l'alerte\n                      </CardTitle>\n                      <CardDescription>\n                        Informations complètes sur l'incident signalé\n                      </CardDescription>\n                    </div>\n                    <div className=\"flex gap-2\">\n                      <Badge className={getStatusColor(selectedAlert.status)}>\n                        {getStatusText(selectedAlert.status)}\n                      </Badge>\n                      <Badge className={getUrgencyColor(selectedAlert.urgency)}>\n                        {selectedAlert.urgency === 'high' ? 'Urgent' :\n                         selectedAlert.urgency === 'medium' ? 'Modéré' : 'Info'}\n                      </Badge>\n                    </div>\n                  </div>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div>\n                    <h4 className=\"font-semibold text-base mb-1\">{selectedAlert.reason}</h4>\n                    <p className=\"text-sm text-muted-foreground\">\n                      {selectedAlert.description}\n                    </p>\n                  </div>\n\n                  <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                    <MapPin className=\"w-4 h-4\" />\n                    <span>{selectedAlert.location}</span>\n                  </div>\n\n                  <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                    <Clock className=\"w-4 h-4\" />\n                    <span>{selectedAlert.timestamp}</span>\n                  </div>\n\n                  <div className=\"flex items-center gap-2 text-sm\">\n                    <span className=\"text-muted-foreground\">Signalé par:</span>\n                    <span className=\"font-medium\">{selectedAlert.author.name}</span>\n                    {selectedAlert.author.hasCIN && (\n                      <Shield className=\"w-4 h-4 text-green-400\" />\n                    )}\n                  </div>\n\n                  <div className=\"flex gap-2 pt-2\">\n                    <Button \n                      variant=\"outline\"\n                      onClick={() => onAlertClick?.(selectedAlert)}\n                      data-testid=\"button-view-full-alert\"\n                    >\n                      Voir l'alerte complète\n                    </Button>\n                    <Button \n                      variant=\"outline\"\n                      onClick={() => console.log('Navigate to', selectedAlert.coordinates)}\n                      data-testid=\"button-navigate\"\n                    >\n                      <Navigation className=\"w-4 h-4 mr-2\" />\n                      Naviguer\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":12362},"client/src/components/ProfilePage.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useState } from \"react\";\nimport { Upload, Shield, CheckCircle, User, Phone, Mail, Camera } from \"lucide-react\";\n\ninterface ProfilePageProps {\n  user?: {\n    id: string;\n    name: string;\n    phone: string;\n    email?: string;\n    avatar?: string;\n    hasCIN: boolean;\n    joinedAt: string;\n    alertsCount: number;\n    validationsCount: number;\n    neighborhood?: string;\n  };\n  onUpdateProfile?: (data: any) => void;\n  onUploadCIN?: (file: File) => void;\n  onUploadAvatar?: (file: File) => void;\n}\n\nexport default function ProfilePage({ \n  user, \n  onUpdateProfile, \n  onUploadCIN, \n  onUploadAvatar \n}: ProfilePageProps) {\n  const [isEditing, setIsEditing] = useState(false);\n  const [formData, setFormData] = useState({\n    name: user?.name || '',\n    phone: user?.phone || '',\n    email: user?.email || '',\n    neighborhood: user?.neighborhood || ''\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    console.log('Profile updated:', formData);\n    onUpdateProfile?.(formData);\n    setIsEditing(false);\n  };\n\n  const handleCINUpload = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      console.log('CIN file selected:', file.name);\n      onUploadCIN?.(file);\n    }\n  };\n\n  const handleAvatarUpload = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      console.log('Avatar file selected:', file.name);\n      onUploadAvatar?.(file);\n    }\n  };\n\n  return (\n    <div className=\"container mx-auto px-4 py-6 max-w-4xl\">\n      <div className=\"space-y-6\">\n        {/* Header */}\n        <div>\n          <h1 className=\"text-3xl font-bold\">Mon Profil</h1>\n          <p className=\"text-muted-foreground\">\n            Gérez vos informations personnelles et votre statut de vérification\n          </p>\n        </div>\n\n        <div className=\"grid md:grid-cols-3 gap-6\">\n          {/* Profile Overview */}\n          <Card className=\"md:col-span-1\">\n            <CardHeader className=\"text-center\">\n              <div className=\"relative inline-block\">\n                <Avatar className=\"w-24 h-24 mx-auto\">\n                  <AvatarImage src={user?.avatar} alt={user?.name} />\n                  <AvatarFallback className=\"text-2xl\">\n                    {user?.name?.charAt(0) || 'U'}\n                  </AvatarFallback>\n                </Avatar>\n                <Button\n                  size=\"icon\"\n                  className=\"absolute bottom-0 right-0 rounded-full w-8 h-8\"\n                  onClick={() => document.getElementById('avatar-upload')?.click()}\n                  data-testid=\"button-upload-avatar\"\n                >\n                  <Camera className=\"w-4 h-4\" />\n                </Button>\n                <input\n                  id=\"avatar-upload\"\n                  type=\"file\"\n                  accept=\"image/*\"\n                  className=\"hidden\"\n                  onChange={handleAvatarUpload}\n                />\n              </div>\n              <CardTitle className=\"flex items-center justify-center gap-2\">\n                {user?.name || 'Utilisateur'}\n                {user?.hasCIN && (\n                  <Shield className=\"w-5 h-5 text-green-400\" />\n                )}\n              </CardTitle>\n              <CardDescription>\n                Membre depuis {user?.joinedAt || 'récemment'}\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"text-center\">\n                <Badge \n                  className={user?.hasCIN \n                    ? \"bg-green-500/20 text-green-400 border-green-500/30\" \n                    : \"bg-yellow-500/20 text-yellow-400 border-yellow-500/30\"\n                  }\n                  data-testid={`status-${user?.hasCIN ? 'verified' : 'pending'}`}\n                >\n                  {user?.hasCIN ? 'Utilisateur vérifié' : 'En attente de vérification'}\n                </Badge>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4 text-center\">\n                <div>\n                  <p className=\"text-2xl font-bold text-primary\">{user?.alertsCount || 0}</p>\n                  <p className=\"text-xs text-muted-foreground\">Alertes créées</p>\n                </div>\n                <div>\n                  <p className=\"text-2xl font-bold text-primary\">{user?.validationsCount || 0}</p>\n                  <p className=\"text-xs text-muted-foreground\">Validations</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Profile Information */}\n          <Card className=\"md:col-span-2\">\n            <CardHeader>\n              <div className=\"flex justify-between items-center\">\n                <div>\n                  <CardTitle>Informations personnelles</CardTitle>\n                  <CardDescription>\n                    Gérez vos informations de profil et de contact\n                  </CardDescription>\n                </div>\n                <Button\n                  variant=\"outline\"\n                  onClick={() => setIsEditing(!isEditing)}\n                  data-testid=\"button-edit-profile\"\n                >\n                  {isEditing ? 'Annuler' : 'Modifier'}\n                </Button>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <form onSubmit={handleSubmit} className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"name\">Nom complet</Label>\n                  <div className=\"relative\">\n                    <User className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                    <Input\n                      id=\"name\"\n                      value={formData.name}\n                      onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}\n                      disabled={!isEditing}\n                      className=\"pl-10\"\n                      data-testid=\"input-profile-name\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"phone\">Numéro de téléphone</Label>\n                  <div className=\"relative\">\n                    <Phone className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                    <Input\n                      id=\"phone\"\n                      value={formData.phone}\n                      onChange={(e) => setFormData(prev => ({ ...prev, phone: e.target.value }))}\n                      disabled={!isEditing}\n                      className=\"pl-10\"\n                      data-testid=\"input-profile-phone\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"email\">Email (optionnel)</Label>\n                  <div className=\"relative\">\n                    <Mail className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                    <Input\n                      id=\"email\"\n                      type=\"email\"\n                      value={formData.email}\n                      onChange={(e) => setFormData(prev => ({ ...prev, email: e.target.value }))}\n                      disabled={!isEditing}\n                      className=\"pl-10\"\n                      placeholder=\"votre@email.com\"\n                      data-testid=\"input-profile-email\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"neighborhood\">Quartier</Label>\n                  <div className=\"relative\">\n                    <User className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                    <Input\n                      id=\"neighborhood\"\n                      type=\"text\"\n                      value={formData.neighborhood}\n                      onChange={(e) => setFormData(prev => ({ ...prev, neighborhood: e.target.value }))}\n                      disabled={!isEditing}\n                      className=\"pl-10\"\n                      placeholder={formData.neighborhood || \"À compléter\"}\n                      data-testid=\"input-profile-neighborhood\"\n                    />\n                  </div>\n                  {!formData.neighborhood && (\n                    <p className=\"text-sm text-yellow-600\">⚠️ Veuillez compléter votre quartier</p>\n                  )}\n                </div>\n\n                {isEditing && (\n                  <Button type=\"submit\" data-testid=\"button-save-profile\">\n                    Sauvegarder les modifications\n                  </Button>\n                )}\n              </form>\n            </CardContent>\n          </Card>\n\n          {/* CIN Verification */}\n          <Card className=\"md:col-span-3\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Shield className=\"w-5 h-5\" />\n                Vérification d'identité (CIN)\n              </CardTitle>\n              <CardDescription>\n                Uploadez votre carte d'identité nationale pour devenir un utilisateur vérifié.\n                Les utilisateurs vérifiés voient leurs alertes automatiquement confirmées.\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              {user?.hasCIN ? (\n                <div className=\"flex items-center gap-3 p-4 bg-green-500/10 rounded-lg border border-green-500/20\">\n                  <CheckCircle className=\"w-6 h-6 text-green-400\" />\n                  <div>\n                    <p className=\"font-medium text-green-400\">Identité vérifiée</p>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Votre carte d'identité a été validée. Vos alertes sont automatiquement confirmées.\n                    </p>\n                  </div>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  <div className=\"p-4 bg-yellow-500/10 rounded-lg border border-yellow-500/20\">\n                    <div className=\"flex items-start gap-3\">\n                      <Upload className=\"w-6 h-6 text-yellow-400 mt-0.5\" />\n                      <div>\n                        <p className=\"font-medium text-yellow-400\">Vérification en attente</p>\n                        <p className=\"text-sm text-muted-foreground mt-1\">\n                          Uploadez une photo claire de votre carte d'identité nationale (recto/verso).\n                          Le traitement prend généralement 24-48h.\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"grid md:grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"cin-front\" className=\"text-sm font-medium\">\n                        Recto de la CIN\n                      </Label>\n                      <div className=\"mt-2\">\n                        <input\n                          id=\"cin-front\"\n                          type=\"file\"\n                          accept=\"image/*\"\n                          className=\"hidden\"\n                          onChange={handleCINUpload}\n                        />\n                        <Button\n                          variant=\"outline\"\n                          className=\"w-full h-32 flex-col gap-2\"\n                          onClick={() => document.getElementById('cin-front')?.click()}\n                          data-testid=\"button-upload-cin-front\"\n                        >\n                          <Upload className=\"w-8 h-8 text-muted-foreground\" />\n                          <span className=\"text-sm\">Cliquer pour uploader</span>\n                        </Button>\n                      </div>\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"cin-back\" className=\"text-sm font-medium\">\n                        Verso de la CIN\n                      </Label>\n                      <div className=\"mt-2\">\n                        <input\n                          id=\"cin-back\"\n                          type=\"file\"\n                          accept=\"image/*\"\n                          className=\"hidden\"\n                          onChange={handleCINUpload}\n                        />\n                        <Button\n                          variant=\"outline\"\n                          className=\"w-full h-32 flex-col gap-2\"\n                          onClick={() => document.getElementById('cin-back')?.click()}\n                          data-testid=\"button-upload-cin-back\"\n                        >\n                          <Upload className=\"w-8 h-8 text-muted-foreground\" />\n                          <span className=\"text-sm\">Cliquer pour uploader</span>\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"text-xs text-muted-foreground space-y-1\">\n                    <p>• Format accepté : JPG, PNG (max 5MB)</p>\n                    <p>• Assurez-vous que toutes les informations sont lisibles</p>\n                    <p>• Vos données sont sécurisées et ne sont utilisées que pour la vérification</p>\n                  </div>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":13768},"client/src/components/SOSForm.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useState } from \"react\";\nimport { AlertTriangle, MapPin, Camera, Send } from \"lucide-react\";\n\ninterface SOSFormProps {\n  onSubmit?: (data: any) => void;\n  onClose?: () => void;\n  loading?: boolean;\n}\n\nexport default function SOSForm({ onSubmit, onClose, loading }: SOSFormProps) {\n  const [formData, setFormData] = useState({\n    reason: '',\n    description: '',\n    location: '',\n    media: null as File | null,\n    urgency: 'medium'\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    console.log('SOS form submitted:', formData);\n    onSubmit?.(formData);\n  };\n\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0] || null;\n    setFormData(prev => ({ ...prev, media: file }));\n  };\n\n  return (\n    <Card className=\"w-full max-w-lg mx-auto\">\n      <CardHeader>\n        <div className=\"flex items-center gap-2\">\n          <AlertTriangle className=\"w-6 h-6 text-destructive\" />\n          <div>\n            <CardTitle className=\"text-xl\">Signaler une alerte SOS</CardTitle>\n            <CardDescription>\n              Décrivez la situation pour alerter la communauté\n            </CardDescription>\n          </div>\n        </div>\n      </CardHeader>\n\n      <CardContent>\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"reason\">Type d'incident</Label>\n            <Select \n              value={formData.reason} \n              onValueChange={(value) => setFormData(prev => ({ ...prev, reason: value }))}\n            >\n              <SelectTrigger data-testid=\"select-reason\">\n                <SelectValue placeholder=\"Sélectionnez le type d'incident\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"agression\">Agression</SelectItem>\n                <SelectItem value=\"vol\">Vol/Cambriolage</SelectItem>\n                <SelectItem value=\"harcelement\">Harcèlement</SelectItem>\n                <SelectItem value=\"accident\">Accident</SelectItem>\n                <SelectItem value=\"urgence_medicale\">Urgence médicale</SelectItem>\n                <SelectItem value=\"autre\">Autre</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"description\">Description détaillée</Label>\n            <Textarea\n              id=\"description\"\n              placeholder=\"Décrivez ce qui s'est passé...\"\n              value={formData.description}\n              onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\n              data-testid=\"input-description\"\n              rows={4}\n              required\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"location\">Localisation</Label>\n            <div className=\"relative\">\n              <MapPin className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n              <Input\n                id=\"location\"\n                type=\"text\"\n                placeholder=\"Adresse ou lieu précis\"\n                className=\"pl-10\"\n                value={formData.location}\n                onChange={(e) => setFormData(prev => ({ ...prev, location: e.target.value }))}\n                data-testid=\"input-location\"\n                required\n              />\n            </div>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"urgency\">Niveau d'urgence</Label>\n            <Select \n              value={formData.urgency} \n              onValueChange={(value) => setFormData(prev => ({ ...prev, urgency: value }))}\n            >\n              <SelectTrigger data-testid=\"select-urgency\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"low\">Faible - Information préventive</SelectItem>\n                <SelectItem value=\"medium\">Moyen - Attention requise</SelectItem>\n                <SelectItem value=\"high\">Élevé - Danger immédiat</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"media\">Photo/Vidéo (optionnel)</Label>\n            <div className=\"flex items-center gap-2\">\n              <Input\n                id=\"media\"\n                type=\"file\"\n                accept=\"image/*,video/*\"\n                onChange={handleFileChange}\n                className=\"flex-1\"\n                data-testid=\"input-media\"\n              />\n              <Button type=\"button\" variant=\"outline\" size=\"icon\">\n                <Camera className=\"w-4 h-4\" />\n              </Button>\n            </div>\n            {formData.media && (\n              <p className=\"text-sm text-muted-foreground\">\n                Fichier sélectionné: {formData.media.name}\n              </p>\n            )}\n          </div>\n\n          <div className=\"flex gap-2 pt-4\">\n            <Button \n              type=\"button\" \n              variant=\"outline\" \n              className=\"flex-1\"\n              onClick={onClose}\n              data-testid=\"button-cancel\"\n            >\n              Annuler\n            </Button>\n            <Button \n              type=\"submit\" \n              className=\"flex-1\"\n              disabled={loading}\n              data-testid=\"button-submit-sos\"\n            >\n              {loading ? 'Envoi...' : (\n                <>\n                  <Send className=\"w-4 h-4 mr-2\" />\n                  Signaler\n                </>\n              )}\n            </Button>\n          </div>\n        </form>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":6081},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/AuthPage.tsx":{"content":"import AuthForm from \"@/components/AuthForm\";\nimport { useLocation } from \"wouter\";\nimport { useState } from \"react\";\n\ninterface AuthPageProps {\n  mode: 'login' | 'register';\n  onLogin?: () => void;\n}\n\nexport default function AuthPage({ mode, onLogin }: AuthPageProps) {\n  const [, setLocation] = useLocation();\n  const [loading, setLoading] = useState(false);\n\n  const handleSubmit = (data: any) => {\n    setLoading(true);\n    console.log('Auth submitted:', data);\n    \n    // todo: remove mock functionality - simulate auth\n    setTimeout(() => {\n      setLoading(false);\n      // Use onLogin if provided, otherwise redirect to dashboard\n      if (onLogin) {\n        onLogin();\n      } else {\n        setLocation('/dashboard');\n      }\n    }, 2000);\n  };\n\n  return (\n    <AuthForm\n      mode={mode}\n      onSubmit={handleSubmit}\n      onToggleMode={() => setLocation(mode === 'login' ? '/register' : '/login')}\n      loading={loading}\n    />\n  );\n}","size_bytes":950},"client/src/pages/LandingPage.tsx":{"content":"import LandingHero from \"@/components/LandingHero\";\nimport { useLocation } from \"wouter\";\n\ninterface LandingPageProps {\n  onLogin?: () => void;\n}\n\nexport default function LandingPage({ onLogin }: LandingPageProps) {\n  const [, setLocation] = useLocation();\n\n  return (\n    <LandingHero\n      onLogin={onLogin || (() => setLocation('/login'))}\n      onRegister={() => setLocation('/register')}\n    />\n  );\n}","size_bytes":406},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/examples/AdminDashboard.tsx":{"content":"import AdminDashboard from '../AdminDashboard';\n\nexport default function AdminDashboardExample() {\n  return (\n    <AdminDashboard \n      onUserAction={(userId, action) => console.log('User action:', userId, action)}\n      onAlertAction={(alertId, action) => console.log('Alert action:', alertId, action)}\n    />\n  );\n}","size_bytes":318},"client/src/components/examples/AlertCard.tsx":{"content":"import AlertCard from '../AlertCard';\n\nexport default function AlertCardExample() {\n  // todo: remove mock functionality\n  const mockAlert = {\n    id: '1',\n    reason: 'Agression',\n    description: 'Tentative d\\'agression rue Victor Hugo, individu s\\'est enfui à pied vers le nord. Attention dans ce secteur ce soir.',\n    location: 'Rue Victor Hugo, 75016 Paris',\n    status: 'pending' as const,\n    urgency: 'high' as const,\n    timestamp: 'Il y a 15 minutes',\n    author: {\n      name: 'Marie Dubois',\n      avatar: 'https://images.unsplash.com/photo-1494790108755-2616b169db2c?w=32&h=32&fit=crop&crop=face',\n      hasCIN: true\n    },\n    validations: {\n      confirmed: 2,\n      rejected: 0\n    },\n    media: 'photo.jpg'\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background p-6\">\n      <div className=\"max-w-md mx-auto\">\n        <AlertCard \n          alert={mockAlert}\n          onValidate={(id, validation) => console.log('Validation:', id, validation)}\n          onViewDetails={(id) => console.log('View details:', id)}\n          currentUserId=\"user123\"\n          showActions={true}\n        />\n      </div>\n    </div>\n  );\n}","size_bytes":1142},"client/src/components/examples/AuthForm.tsx":{"content":"import AuthForm from '../AuthForm';\nimport { useState } from 'react';\n\nexport default function AuthFormExample() {\n  const [mode, setMode] = useState<'login' | 'register'>('register');\n  const [loading, setLoading] = useState(false);\n  \n  // todo: remove mock functionality\n  const handleSubmit = (data: any) => {\n    setLoading(true);\n    console.log('Form submitted:', data);\n    setTimeout(() => setLoading(false), 2000);\n  };\n\n  return (\n    <AuthForm \n      mode={mode}\n      onSubmit={handleSubmit}\n      onToggleMode={() => setMode(mode === 'login' ? 'register' : 'login')}\n      loading={loading}\n      error={mode === 'login' ? \"Numéro ou mot de passe incorrect\" : undefined}\n    />\n  );\n}","size_bytes":699},"client/src/components/examples/Dashboard.tsx":{"content":"import Dashboard from '../Dashboard';\n\nexport default function DashboardExample() {\n  // todo: remove mock functionality\n  const mockUser = {\n    name: \"Alex Dubois\",\n    hasCIN: true\n  };\n\n  return <Dashboard user={mockUser} />;\n}","size_bytes":231},"client/src/components/examples/Header.tsx":{"content":"import Header from '../Header';\n\nexport default function HeaderExample() {\n  // todo: remove mock functionality\n  const mockUser = {\n    name: \"Alex Dubois\",\n    avatar: \"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=32&h=32&fit=crop&crop=face\"\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header \n        user={mockUser}\n        onLogout={() => console.log('Logout triggered')}\n        onProfile={() => console.log('Profile triggered')}\n        onSettings={() => console.log('Settings triggered')}\n      />\n    </div>\n  );\n}","size_bytes":570},"client/src/components/examples/LandingHero.tsx":{"content":"import LandingHero from '../LandingHero';\n\nexport default function LandingHeroExample() {\n  return (\n    <LandingHero \n      onLogin={() => console.log('Login triggered')}\n      onRegister={() => console.log('Register triggered')}\n    />\n  );\n}","size_bytes":244},"client/src/components/examples/MapView.tsx":{"content":"import MapView from '../MapView';\n\nexport default function MapViewExample() {\n  // todo: remove mock functionality\n  const mockAlerts = [\n    {\n      id: '1',\n      reason: 'Agression',\n      description: 'Tentative d\\'agression rue Victor Hugo, individu s\\'est enfui à pied.',\n      location: 'Rue Victor Hugo, 75016 Paris',\n      coordinates: { lat: 48.8566, lng: 2.3522 },\n      status: 'pending' as const,\n      urgency: 'high' as const,\n      timestamp: 'Il y a 15 minutes',\n      author: { name: 'Marie Dubois', hasCIN: true }\n    },\n    {\n      id: '2',\n      reason: 'Vol',\n      description: 'Vol de vélo signalé devant la station de métro.',\n      location: 'Station Châtelet, 75001 Paris',\n      coordinates: { lat: 48.8606, lng: 2.3376 },\n      status: 'confirmed' as const,\n      urgency: 'medium' as const,\n      timestamp: 'Il y a 1 heure',\n      author: { name: 'Alex Martin', hasCIN: false }\n    },\n    {\n      id: '3',\n      reason: 'Harcèlement',\n      description: 'Fausse alerte de harcèlement.',\n      location: 'Boulevard Saint-Germain, 75006 Paris',\n      coordinates: { lat: 48.8534, lng: 2.3488 },\n      status: 'fake' as const,\n      urgency: 'low' as const,\n      timestamp: 'Il y a 3 heures',\n      author: { name: 'Sophie Chen', hasCIN: false }\n    }\n  ];\n\n  return (\n    <MapView \n      alerts={mockAlerts}\n      onAlertClick={(alert) => console.log('Alert clicked:', alert)}\n      centerLocation={{ lat: 48.8566, lng: 2.3522 }}\n    />\n  );\n}","size_bytes":1480},"client/src/components/examples/ProfilePage.tsx":{"content":"import ProfilePage from '../ProfilePage';\n\nexport default function ProfilePageExample() {\n  // todo: remove mock functionality\n  const mockUser = {\n    id: '1',\n    name: 'Alex Dubois',\n    phone: '+33 6 12 34 56 78',\n    email: 'alex.dubois@email.com',\n    avatar: 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=96&h=96&fit=crop&crop=face',\n    hasCIN: false,\n    joinedAt: 'Mars 2024',\n    alertsCount: 5,\n    validationsCount: 23\n  };\n\n  return (\n    <ProfilePage \n      user={mockUser}\n      onUpdateProfile={(data) => console.log('Update profile:', data)}\n      onUploadCIN={(file) => console.log('Upload CIN:', file.name)}\n      onUploadAvatar={(file) => console.log('Upload avatar:', file.name)}\n    />\n  );\n}","size_bytes":733},"client/src/components/examples/SOSForm.tsx":{"content":"import SOSForm from '../SOSForm';\nimport { useState } from 'react';\n\nexport default function SOSFormExample() {\n  const [loading, setLoading] = useState(false);\n  \n  // todo: remove mock functionality\n  const handleSubmit = (data: any) => {\n    setLoading(true);\n    console.log('SOS submitted:', data);\n    setTimeout(() => setLoading(false), 2000);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background p-6 flex items-center\">\n      <SOSForm \n        onSubmit={handleSubmit}\n        onClose={() => console.log('Close triggered')}\n        loading={loading}\n      />\n    </div>\n  );\n}","size_bytes":594},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"replit.md":{"content":"# Gasy Iray Safety Platform\n\n## Overview\n\nGasy Iray is a modern web-based safety platform designed for community-driven security reporting and validation. The application allows users to create SOS alerts, validate community reports, and visualize security incidents on an interactive map. The platform features different user tiers (standard, verified with CIN, and admin) with varying privileges for alert auto-confirmation and administrative controls.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n\n**React + TypeScript SPA**: The client is built as a single-page application using React 18 with TypeScript for type safety. The application uses Vite for fast development and building.\n\n**Component Design System**: Implements shadcn/ui component library with Radix UI primitives for accessibility. The design follows a dark-mode-first approach inspired by Framer's aesthetic with sophisticated typography using Inter and Space Grotesk fonts.\n\n**State Management**: Uses React Query (TanStack Query) for server state management and caching. Local component state is managed with React hooks.\n\n**Routing**: Implements client-side routing with Wouter, a lightweight routing library. The app includes routes for landing page, authentication, dashboard, profile, map view, and admin panel.\n\n**Styling**: Tailwind CSS with custom design tokens and CSS variables for theming. Includes hover effects, elevation states, and responsive design patterns.\n\n### Backend Architecture\n\n**Express.js API Server**: Node.js backend using Express with TypeScript. The server is configured for both development and production environments.\n\n**Database Layer**: PostgreSQL database accessed through Drizzle ORM with Neon serverless database hosting. The database schema includes user management with authentication fields.\n\n**Session Management**: Planned implementation includes express-session with connect-pg-simple for PostgreSQL session storage.\n\n**File Upload Handling**: Architecture supports file uploads for CIN verification and alert media attachments.\n\n### Data Storage Solutions\n\n**Primary Database**: PostgreSQL with Drizzle ORM for type-safe database operations. The schema currently includes basic user management with plans for alerts, validations, and file attachments.\n\n**Session Storage**: PostgreSQL-based session storage for maintaining user authentication state.\n\n**File Storage**: Architecture prepared for handling uploaded files (CIN documents, alert photos/videos) though specific storage solution (local/cloud) is not yet implemented.\n\n### Authentication and Authorization\n\n**Multi-tier User System**: Three user types with different privileges:\n- Standard users: Basic alert creation and community validation\n- Verified users (CIN holders): Auto-confirmed alerts\n- Admin users: Full platform management capabilities\n\n**Session-based Authentication**: Persistent login sessions with secure cookie handling. Password hashing with bcrypt for security.\n\n**Role-based Access Control**: Different interface components and API endpoints based on user type and verification status.\n\n### User Interface Structure\n\n**Responsive Design**: Mobile-first approach with sidebar navigation that adapts to screen size. Uses custom hooks for mobile detection.\n\n**Navigation System**: Collapsible sidebar with context-aware menu items. Different navigation options based on user role (admin panel access for admins).\n\n**Dashboard-centric Layout**: Main application revolves around a dashboard for alert management, with separate views for map visualization and user profiles.\n\n**Interactive Map Integration**: Leaflet.js integration planned for displaying alerts with different status indicators (pending, confirmed, fake).\n\n## External Dependencies\n\n### Core Framework Dependencies\n- **React 18** with TypeScript for frontend development\n- **Express.js** for backend API server\n- **Vite** for frontend build tooling and development server\n\n### Database and ORM\n- **Drizzle ORM** for type-safe database operations\n- **@neondatabase/serverless** for PostgreSQL database hosting\n- **connect-pg-simple** for PostgreSQL session storage\n\n### UI and Styling\n- **Tailwind CSS** for utility-first styling\n- **Radix UI** components for accessible UI primitives\n- **shadcn/ui** component library for consistent design system\n- **Lucide React** for icon set\n\n### State Management and Data Fetching\n- **@tanstack/react-query** for server state management\n- **React Hook Form** with Zod resolvers for form handling\n\n### Authentication and Security\n- **bcrypt** for password hashing (planned)\n- **express-session** for session management (planned)\n\n### Map and Geolocation\n- **Leaflet.js** for interactive maps (referenced in HTML)\n\n### Development and Build Tools\n- **TypeScript** for type safety across the stack\n- **ESBuild** for production backend building\n- **PostCSS** with Autoprefixer for CSS processing\n\n### Utility Libraries\n- **date-fns** for date manipulation\n- **class-variance-authority** for component variant handling\n- **clsx** and **tailwind-merge** for conditional styling","size_bytes":5164},"client/src/components/EmergencyContacts.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Phone, MapPin, Shield, Users } from \"lucide-react\";\nimport { useState } from \"react\";\n\ninterface EmergencyContact {\n  id: string;\n  name: string;\n  phone: string;\n  type: 'police' | 'gendarmerie' | 'emergency';\n  province: string;\n  area?: string;\n}\n\nconst emergencyContacts: EmergencyContact[] = [\n  // Numéros nationaux d'urgence\n  { id: 'nat1', name: 'Police Urgence', phone: '017', type: 'emergency', province: 'National' },\n  { id: 'nat2', name: 'Urgence Générale', phone: '117', type: 'emergency', province: 'National' },\n  { id: 'nat3', name: 'Urgence Mobile', phone: '119', type: 'emergency', province: 'National' },\n  \n  // ANTANANARIVO\n  { id: 'tana1', name: 'Gendarmerie Aéroport Ivato', phone: '+261 34 14 005 53', type: 'gendarmerie', province: 'Antananarivo', area: 'Ivato' },\n  { id: 'tana2', name: 'Brigade Ambohidratrimo', phone: '+261 34 05 700 78', type: 'gendarmerie', province: 'Antananarivo', area: 'Ambohidratrimo' },\n  { id: 'tana3', name: 'Brigade Andoharanofotsy', phone: '+261 34 05 700 84', type: 'gendarmerie', province: 'Antananarivo', area: 'Andoharanofotsy' },\n  { id: 'tana4', name: 'Brigade Betongolo', phone: '+261 34 14 006 50', type: 'gendarmerie', province: 'Antananarivo', area: 'Betongolo' },\n  { id: 'tana5', name: 'Brigade Fenoarivo', phone: '+261 34 14 009 56', type: 'gendarmerie', province: 'Antananarivo', area: 'Fenoarivo' },\n  { id: 'tana6', name: 'Brigade Itaosy', phone: '+261 34 14 009 55', type: 'gendarmerie', province: 'Antananarivo', area: 'Itaosy' },\n  { id: 'tana7', name: 'Brigade Sabotsy Namehana', phone: '+261 34 14 009 52', type: 'gendarmerie', province: 'Antananarivo', area: 'Sabotsy Namehana' },\n  { id: 'tana8', name: 'État-Major Groupement', phone: '+261 20 22 223 02', type: 'gendarmerie', province: 'Antananarivo' },\n  { id: 'tana9', name: 'Police Centrale', phone: '+261 20 22 227 36', type: 'police', province: 'Antananarivo' },\n  { id: 'tana10', name: 'Commissariat Antanimora', phone: '+261 20 22 409 74', type: 'police', province: 'Antananarivo', area: 'Antanimora' },\n  { id: 'tana11', name: 'Brigade Criminelle', phone: '+261 20 22 204 66', type: 'police', province: 'Antananarivo' },\n  { id: 'tana12', name: 'Commissariat Tsaralalàna', phone: '+261 20 22 227 35', type: 'police', province: 'Antananarivo', area: 'Tsaralalàna' },\n  { id: 'tana13', name: 'Sécurité Publique Anosy', phone: '+261 20 22 284 33', type: 'police', province: 'Antananarivo', area: 'Anosy' },\n  { id: 'tana14', name: 'Unité Spéciale Aéroport', phone: '+261 20 22 444 27', type: 'police', province: 'Antananarivo', area: 'Aéroport Ivato' },\n  { id: 'tana15', name: 'Bureau Accidents Route', phone: '+261 34 05 517 24', type: 'police', province: 'Antananarivo' },\n  \n  // FIANARANTSOA\n  { id: 'fian1', name: 'Gendarmerie Tsaramandroso', phone: '+261 20 75 510 06', type: 'gendarmerie', province: 'Fianarantsoa', area: 'Tsaramandroso' },\n  \n  // TOAMASINA\n  { id: 'toam1', name: 'Gendarmerie Sainte-Marie', phone: '+261 34 71 171 07', type: 'gendarmerie', province: 'Toamasina', area: 'Sainte-Marie' },\n  \n  // MAHAJANGA\n  { id: 'maja1', name: 'Service Sécurité', phone: '+261 228 72', type: 'police', province: 'Mahajanga' },\n  \n  // ANTSIRANANA\n  { id: 'ants1', name: 'Service Sécurité', phone: '+261 227 00', type: 'police', province: 'Antsiranana' },\n  \n  // TOLIARA\n  { id: 'toli1', name: 'Service Sécurité', phone: '+261 414 59', type: 'police', province: 'Toliara' },\n  { id: 'toli2', name: 'Commissariat Fort-Dauphin', phone: '+261 34 05 526 97', type: 'police', province: 'Toliara', area: 'Fort-Dauphin' },\n  \n  // CONTACTS NATIONAUX\n  { id: 'hq1', name: 'QG Gendarmerie Nationale', phone: '+261 34 14 005 15', type: 'gendarmerie', province: 'National' }\n];\n\nconst provinces = ['National', 'Antananarivo', 'Fianarantsoa', 'Toamasina', 'Mahajanga', 'Antsiranana', 'Toliara'];\n\nexport default function EmergencyContacts() {\n  const [selectedProvince, setSelectedProvince] = useState('National');\n\n  const filteredContacts = emergencyContacts.filter(contact => \n    selectedProvince === 'National' ? contact.province === 'National' : contact.province === selectedProvince\n  );\n\n  const getTypeColor = (type: string) => {\n    switch (type) {\n      case 'emergency': return 'bg-red-500/20 text-red-400 border-red-500/30';\n      case 'gendarmerie': return 'bg-blue-500/20 text-blue-400 border-blue-500/30';\n      case 'police': return 'bg-green-500/20 text-green-400 border-green-500/30';\n      default: return 'bg-gray-500/20 text-gray-400 border-gray-500/30';\n    }\n  };\n\n  const getTypeIcon = (type: string) => {\n    switch (type) {\n      case 'emergency': return <Phone className=\"w-4 h-4\" />;\n      case 'gendarmerie': return <Shield className=\"w-4 h-4\" />;\n      case 'police': return <Users className=\"w-4 h-4\" />;\n      default: return <Phone className=\"w-4 h-4\" />;\n    }\n  };\n\n  const getTypeText = (type: string) => {\n    switch (type) {\n      case 'emergency': return 'Urgence';\n      case 'gendarmerie': return 'Gendarmerie';\n      case 'police': return 'Police';\n      default: return 'Contact';\n    }\n  };\n\n  return (\n    <div className=\"container mx-auto px-4 py-6 space-y-6\">\n      <div className=\"flex flex-col space-y-4\">\n        <div className=\"flex items-center gap-4\">\n          <Phone className=\"w-8 h-8 text-primary\" />\n          <div>\n            <h1 className=\"text-3xl font-bold\">Contacts d'Urgence</h1>\n            <p className=\"text-muted-foreground\">Police et Gendarmerie par province</p>\n          </div>\n        </div>\n\n        {/* Sélecteur de province */}\n        <div className=\"flex flex-wrap gap-2\">\n          {provinces.map(province => (\n            <Button\n              key={province}\n              variant={selectedProvince === province ? \"default\" : \"outline\"}\n              size=\"sm\"\n              onClick={() => setSelectedProvince(province)}\n              data-testid={`button-province-${province.toLowerCase()}`}\n            >\n              <MapPin className=\"w-3 h-3 mr-1\" />\n              {province}\n            </Button>\n          ))}\n        </div>\n      </div>\n\n      {/* Liste des contacts */}\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n        {filteredContacts.map(contact => (\n          <Card key={contact.id} className=\"hover-elevate\">\n            <CardHeader className=\"pb-3\">\n              <div className=\"flex items-start justify-between\">\n                <div className=\"flex items-center gap-2\">\n                  <Badge className={getTypeColor(contact.type)}>\n                    {getTypeIcon(contact.type)}\n                    <span className=\"ml-1\">{getTypeText(contact.type)}</span>\n                  </Badge>\n                </div>\n              </div>\n              <CardTitle className=\"text-lg\">{contact.name}</CardTitle>\n              {contact.area && (\n                <CardDescription className=\"flex items-center gap-1\">\n                  <MapPin className=\"w-3 h-3\" />\n                  {contact.area}\n                </CardDescription>\n              )}\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"font-mono text-lg font-semibold\">{contact.phone}</span>\n                  <Button\n                    size=\"sm\"\n                    onClick={() => window.open(`tel:${contact.phone}`, '_self')}\n                    data-testid={`button-call-${contact.id}`}\n                  >\n                    <Phone className=\"w-3 h-3 mr-1\" />\n                    Appeler\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {filteredContacts.length === 0 && (\n        <div className=\"text-center py-8 text-muted-foreground\">\n          Aucun contact disponible pour cette province.\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":8126}},"version":1}